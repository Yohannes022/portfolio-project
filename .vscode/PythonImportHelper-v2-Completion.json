[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "pyarrow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyarrow",
        "description": "pyarrow",
        "detail": "pyarrow",
        "documentation": {}
    },
    {
        "label": "pyarrow.parquet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyarrow.parquet",
        "description": "pyarrow.parquet",
        "detail": "pyarrow.parquet",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "crud",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "crud",
        "description": "crud",
        "detail": "crud",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "crud,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "crud.",
        "description": "crud.",
        "detail": "crud.",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "swcpy.swc_config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "swcpy.swc_config",
        "description": "swcpy.swc_config",
        "detail": "swcpy.swc_config",
        "documentation": {}
    },
    {
        "label": "backoff",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "backoff",
        "description": "backoff",
        "detail": "backoff",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "SWCClient",
        "importPath": "swcpy",
        "description": "swcpy",
        "isExtraImport": true,
        "detail": "swcpy",
        "documentation": {}
    },
    {
        "label": "SWCConfig",
        "importPath": "swcpy",
        "description": "swcpy",
        "isExtraImport": true,
        "detail": "swcpy",
        "documentation": {}
    },
    {
        "label": "SWCClient",
        "importPath": "swcpy",
        "description": "swcpy",
        "isExtraImport": true,
        "detail": "swcpy",
        "documentation": {}
    },
    {
        "label": "SWCConfig",
        "importPath": "swcpy",
        "description": "swcpy",
        "isExtraImport": true,
        "detail": "swcpy",
        "documentation": {}
    },
    {
        "label": "League",
        "importPath": "swcpy.schemas",
        "description": "swcpy.schemas",
        "isExtraImport": true,
        "detail": "swcpy.schemas",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "swcpy.schemas",
        "description": "swcpy.schemas",
        "isExtraImport": true,
        "detail": "swcpy.schemas",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "swcpy.schemas",
        "description": "swcpy.schemas",
        "isExtraImport": true,
        "detail": "swcpy.schemas",
        "documentation": {}
    },
    {
        "label": "Performance",
        "importPath": "swcpy.schemas",
        "description": "swcpy.schemas",
        "isExtraImport": true,
        "detail": "swcpy.schemas",
        "documentation": {}
    },
    {
        "label": "League",
        "importPath": "swcpy.schemas",
        "description": "swcpy.schemas",
        "isExtraImport": true,
        "detail": "swcpy.schemas",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "swcpy.schemas",
        "description": "swcpy.schemas",
        "isExtraImport": true,
        "detail": "swcpy.schemas",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "swcpy.schemas",
        "description": "swcpy.schemas",
        "isExtraImport": true,
        "detail": "swcpy.schemas",
        "documentation": {}
    },
    {
        "label": "Performance",
        "importPath": "swcpy.schemas",
        "description": "swcpy.schemas",
        "isExtraImport": true,
        "detail": "swcpy.schemas",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "csv_to_parquet",
        "kind": 2,
        "importPath": "bulk.csv_to_parquet",
        "description": "bulk.csv_to_parquet",
        "peekOfCode": "def csv_to_parquet(input_filename, output_filename: str):\n    source_df = pd.read_csv(input_filename)\n    source_table = pa.Table.from_pandas(source_df)\n    pq.write_table(source_table, output_filename)\nif __name__ == '__main__':\n    csv_to_parquet(\"league_data.csv\",\"league_data.parquet\")\n    csv_to_parquet(\"performance_data.csv\",\"performance_data.parquet\")\n    csv_to_parquet(\"player_data.csv\",\"player_data.parquet\")\n    csv_to_parquet(\"team_data.csv\",\"team_data.parquet\")\n    csv_to_parquet(\"team_player_data.csv\",\"team_player_data.parquet\")",
        "detail": "bulk.csv_to_parquet",
        "documentation": {}
    },
    {
        "label": "get_player",
        "kind": 2,
        "importPath": "chapter3.complete.crud",
        "description": "chapter3.complete.crud",
        "peekOfCode": "def get_player(db: Session, player_id: int):\n    return db.query(models.Player).filter(models.Player.player_id == player_id).first()\ndef get_players(\n    db: Session,\n    skip: int = 0,\n    limit: int = 100,\n    min_last_changed_date: date = None,\n    last_name: str = None,\n    first_name: str = None,\n):",
        "detail": "chapter3.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_players",
        "kind": 2,
        "importPath": "chapter3.complete.crud",
        "description": "chapter3.complete.crud",
        "peekOfCode": "def get_players(\n    db: Session,\n    skip: int = 0,\n    limit: int = 100,\n    min_last_changed_date: date = None,\n    last_name: str = None,\n    first_name: str = None,\n):\n    query = db.query(models.Player)\n    if min_last_changed_date:",
        "detail": "chapter3.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_performances",
        "kind": 2,
        "importPath": "chapter3.complete.crud",
        "description": "chapter3.complete.crud",
        "peekOfCode": "def get_performances(\n    db: Session, skip: int = 0, limit: int = 100, min_last_changed_date: date = None\n):\n    query = db.query(models.Performance)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Performance.last_changed_date >= min_last_changed_date\n        )\n    return query.offset(skip).limit(limit).all()\ndef get_league(db: Session, league_id: int = None):",
        "detail": "chapter3.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_league",
        "kind": 2,
        "importPath": "chapter3.complete.crud",
        "description": "chapter3.complete.crud",
        "peekOfCode": "def get_league(db: Session, league_id: int = None):\n    return db.query(models.League).filter(models.League.league_id == league_id).first()\ndef get_leagues(\n    db: Session,\n    skip: int = 0,\n    limit: int = 100,\n    min_last_changed_date: date = None,\n    league_name: str = None,\n):\n    query = db.query(models.League).options(joinedload(models.League.teams))",
        "detail": "chapter3.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_leagues",
        "kind": 2,
        "importPath": "chapter3.complete.crud",
        "description": "chapter3.complete.crud",
        "peekOfCode": "def get_leagues(\n    db: Session,\n    skip: int = 0,\n    limit: int = 100,\n    min_last_changed_date: date = None,\n    league_name: str = None,\n):\n    query = db.query(models.League).options(joinedload(models.League.teams))\n    if min_last_changed_date:\n        query = query.filter(models.League.last_changed_date >= min_last_changed_date)",
        "detail": "chapter3.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_teams",
        "kind": 2,
        "importPath": "chapter3.complete.crud",
        "description": "chapter3.complete.crud",
        "peekOfCode": "def get_teams(\n    db: Session,\n    skip: int = 0,\n    limit: int = 100,\n    min_last_changed_date: date = None,\n    team_name: str = None,\n    league_id: int = None,\n):\n    query = db.query(models.Team)\n    if min_last_changed_date:",
        "detail": "chapter3.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_player_count",
        "kind": 2,
        "importPath": "chapter3.complete.crud",
        "description": "chapter3.complete.crud",
        "peekOfCode": "def get_player_count(db: Session):\n    query = db.query(models.Player)\n    return query.count()\ndef get_team_count(db: Session):\n    query = db.query(models.Team)\n    return query.count()\ndef get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter3.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_team_count",
        "kind": 2,
        "importPath": "chapter3.complete.crud",
        "description": "chapter3.complete.crud",
        "peekOfCode": "def get_team_count(db: Session):\n    query = db.query(models.Team)\n    return query.count()\ndef get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter3.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_league_count",
        "kind": 2,
        "importPath": "chapter3.complete.crud",
        "description": "chapter3.complete.crud",
        "peekOfCode": "def get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter3.complete.crud",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "chapter3.complete.database",
        "description": "chapter3.complete.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"sqlite:///.fantasy_data.db\"\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nsessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter3.complete.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "chapter3.complete.database",
        "description": "chapter3.complete.database",
        "peekOfCode": "engine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nsessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter3.complete.database",
        "documentation": {}
    },
    {
        "label": "sessionLocal",
        "kind": 5,
        "importPath": "chapter3.complete.database",
        "description": "chapter3.complete.database",
        "peekOfCode": "sessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter3.complete.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "chapter3.complete.database",
        "description": "chapter3.complete.database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "chapter3.complete.database",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "chapter3.complete.models",
        "description": "chapter3.complete.models",
        "peekOfCode": "class Player(Base):\n    __tablename__ = \"player\"\n    player_id = Column(Integer, primary_key=True, index=True)\n    gsis_id = Column(String, nullable=True)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    position = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    performances = relationship(\"Performance\", back_populates=\"player\")\n    # Many-to-many relationship between Player and Team tables",
        "detail": "chapter3.complete.models",
        "documentation": {}
    },
    {
        "label": "Performance",
        "kind": 6,
        "importPath": "chapter3.complete.models",
        "description": "chapter3.complete.models",
        "peekOfCode": "class Performance(Base):\n    __tablename__ = \"performance\"\n    performance_id = Column(Integer, primary_key=True, index=True)\n    week_number = Column(String, nullable=False)\n    fantasy_points = Column(Float, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    player_id = Column(Integer, ForeignKey(\"player.player_id\"))\n    player = relationship(\"Player\", back_populates=\"performances\")\nclass League(Base):\n    __tablename__ = \"league\"",
        "detail": "chapter3.complete.models",
        "documentation": {}
    },
    {
        "label": "League",
        "kind": 6,
        "importPath": "chapter3.complete.models",
        "description": "chapter3.complete.models",
        "peekOfCode": "class League(Base):\n    __tablename__ = \"league\"\n    league_id = Column(Integer, primary_key=True, index=True)\n    league_name = Column(String, nullable=False)\n    scoring_type = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    teams = relationship(\"Team\", back_populates=\"league\")\nclass Team(Base):\n    __tablename__ = \"team\"\n    team_id = Column(Integer, primary_key=True, index=True)",
        "detail": "chapter3.complete.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "chapter3.complete.models",
        "description": "chapter3.complete.models",
        "peekOfCode": "class Team(Base):\n    __tablename__ = \"team\"\n    team_id = Column(Integer, primary_key=True, index=True)\n    team_name = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    league_id = Column(Integer, ForeignKey(\"league.league_id\"))\n    league = relationship(\"League\", back_populates=\"teams\")\n    players = relationship(\"Player\", secondary=\"team_player\", back_populates=\"teams\")\nclass TeamPlayer(Base):\n    __tablename__ = \"team_player\"",
        "detail": "chapter3.complete.models",
        "documentation": {}
    },
    {
        "label": "TeamPlayer",
        "kind": 6,
        "importPath": "chapter3.complete.models",
        "description": "chapter3.complete.models",
        "peekOfCode": "class TeamPlayer(Base):\n    __tablename__ = \"team_player\"\n    team_id = Column(Integer, ForeignKey(\"team.team_id\"), primary_key=True, index=True)\n    player_id = Column(\n        Integer, ForeignKey(\"player.player_id\"), primary_key=True, index=True\n    )\n    last_changed_date = Column(Date, nullable=False)",
        "detail": "chapter3.complete.models",
        "documentation": {}
    },
    {
        "label": "db_session",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def db_session():\n    \"\"\"This starts a database session and closes it when done\"\"\"\n    session = SessionLocal()\n    yield session\n    session.close()\ndef test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id=1001)\n    assert player.player_id == 1001\ndef test_get_players(db_session):",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_player",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id=1001)\n    assert player.player_id == 1001\ndef test_get_players(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(\n        db_session, skip=0, limit=10000, min_last_changed_date=test_date\n    )\n    assert len(players) == 1018",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_players",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_players(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(\n        db_session, skip=0, limit=10000, min_last_changed_date=test_date\n    )\n    assert len(players) == 1018\ndef test_get_players_by_name(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, first_name=\"Bryce\", last_name=\"Young\")\n    assert len(players) == 1",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_players_by_name",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_players_by_name(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, first_name=\"Bryce\", last_name=\"Young\")\n    assert len(players) == 1\n    assert players[0].player_id == 2009\ndef test_get_all_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is\n    what is expected - all the performances\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=18000)\n    assert len(performances) == 17306",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_all_performances",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_all_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is\n    what is expected - all the performances\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=18000)\n    assert len(performances) == 17306\ndef test_get_new_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is\n    what is expected\"\"\"\n    performances = crud.get_performances(\n        db_session, skip=0, limit=10000, min_last_changed_date=test_date",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_new_performances",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_new_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is\n    what is expected\"\"\"\n    performances = crud.get_performances(\n        db_session, skip=0, limit=10000, min_last_changed_date=test_date\n    )\n    assert len(performances) == 2711\ndef test_get_league(db_session):\n    \"\"\"Tests you can get a league\"\"\"\n    league = crud.get_league(db_session, league_id=5002)",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_league",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_league(db_session):\n    \"\"\"Tests you can get a league\"\"\"\n    league = crud.get_league(db_session, league_id=5002)\n    assert league.league_id == 5002\n    assert len(league.teams) == 8\ndef test_get_leagues(db_session):\n    \"\"\"Tests that the count of leagues in the database is what is expected\"\"\"\n    leagues = crud.get_leagues(\n        db_session, skip=0, limit=10000, min_last_changed_date=test_date\n    )",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_leagues",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_leagues(db_session):\n    \"\"\"Tests that the count of leagues in the database is what is expected\"\"\"\n    leagues = crud.get_leagues(\n        db_session, skip=0, limit=10000, min_last_changed_date=test_date\n    )\n    assert len(leagues) == 5\ndef test_get_teams(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(\n        db_session, skip=0, limit=10000, min_last_changed_date=test_date",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_teams",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_teams(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(\n        db_session, skip=0, limit=10000, min_last_changed_date=test_date\n    )\n    assert len(teams) == 20\ndef test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, league_id=5001)\n    assert len(teams) == 12",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_teams_for_one_league",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, league_id=5001)\n    assert len(teams) == 12\n    assert teams[0].league_id == 5001\ndef test_get_team_players(db_session):\n    \"\"\"Tests that a team record can retrieve players, and that 8 players are on the first team\"\"\"\n    first_team = crud.get_teams(\n        db_session, skip=0, limit=1000, min_last_changed_date=test_date\n    )[0]",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_team_players",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_team_players(db_session):\n    \"\"\"Tests that a team record can retrieve players, and that 8 players are on the first team\"\"\"\n    first_team = crud.get_teams(\n        db_session, skip=0, limit=1000, min_last_changed_date=test_date\n    )[0]\n    assert len(first_team.players) == 7\n# test the count functions\ndef test_get_player_count(db_session):\n    player_count = crud.get_player_count(db_session)\n    assert player_count == 1018",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_player_count",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_player_count(db_session):\n    player_count = crud.get_player_count(db_session)\n    assert player_count == 1018\ndef test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)\n    assert team_count == 20\ndef test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_team_count",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)\n    assert team_count == 20\ndef test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_league_count",
        "kind": 2,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "def test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_date",
        "kind": 5,
        "importPath": "chapter3.complete.test_crud",
        "description": "chapter3.complete.test_crud",
        "peekOfCode": "test_date = date(2024, 4, 1)\n@pytest.fixture(scope=\"function\")\ndef db_session():\n    \"\"\"This starts a database session and closes it when done\"\"\"\n    session = SessionLocal()\n    yield session\n    session.close()\ndef test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id=1001)",
        "detail": "chapter3.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "get_player",
        "kind": 2,
        "importPath": "chapter4.complete.crud",
        "description": "chapter4.complete.crud",
        "peekOfCode": "def get_player(db: Session, player_id: int):\n    return db.query(models.Player).filter(\n        models.Player.player_id == player_id).first()\ndef get_players(db: Session, skip: int = 0, limit: int = 100, \n                min_last_changed_date: date = None, \n                last_name : str = None, first_name : str = None, ):\n    query = db.query(models.Player)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Player.last_changed_date >= min_last_changed_date)",
        "detail": "chapter4.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_players",
        "kind": 2,
        "importPath": "chapter4.complete.crud",
        "description": "chapter4.complete.crud",
        "peekOfCode": "def get_players(db: Session, skip: int = 0, limit: int = 100, \n                min_last_changed_date: date = None, \n                last_name : str = None, first_name : str = None, ):\n    query = db.query(models.Player)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Player.last_changed_date >= min_last_changed_date)\n    if first_name:\n        query = query.filter(models.Player.first_name == first_name)\n    if last_name:",
        "detail": "chapter4.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_performances",
        "kind": 2,
        "importPath": "chapter4.complete.crud",
        "description": "chapter4.complete.crud",
        "peekOfCode": "def get_performances(db: Session, skip: int = 0, limit: int = 100, \n                     min_last_changed_date: date = None):\n    query = db.query(models.Performance)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Performance.last_changed_date >= min_last_changed_date)\n    return query.offset(skip).limit(limit).all()\ndef get_league(db: Session, league_id: int = None):\n    return db.query(models.League).filter(\n        models.League.league_id == league_id).first()",
        "detail": "chapter4.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_league",
        "kind": 2,
        "importPath": "chapter4.complete.crud",
        "description": "chapter4.complete.crud",
        "peekOfCode": "def get_league(db: Session, league_id: int = None):\n    return db.query(models.League).filter(\n        models.League.league_id == league_id).first()\ndef get_leagues(db: Session, skip: int = 0, limit: int = 100,\n                 min_last_changed_date: date = None,league_name: str = None):\n    query = db.query(models.League\n                    ).options(joinedload(models.League.teams))\n    if min_last_changed_date:\n        query = query.filter(\n            models.League.last_changed_date >= min_last_changed_date)                              ",
        "detail": "chapter4.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_leagues",
        "kind": 2,
        "importPath": "chapter4.complete.crud",
        "description": "chapter4.complete.crud",
        "peekOfCode": "def get_leagues(db: Session, skip: int = 0, limit: int = 100,\n                 min_last_changed_date: date = None,league_name: str = None):\n    query = db.query(models.League\n                    ).options(joinedload(models.League.teams))\n    if min_last_changed_date:\n        query = query.filter(\n            models.League.last_changed_date >= min_last_changed_date)                              \n    if league_name: \n        query = query.filter(models.League.league_name == league_name)     \n    return query.offset(skip).limit(limit).all()",
        "detail": "chapter4.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_teams",
        "kind": 2,
        "importPath": "chapter4.complete.crud",
        "description": "chapter4.complete.crud",
        "peekOfCode": "def get_teams(db: Session, skip: int = 0, limit: int = 100, \n              min_last_changed_date: date = None, \n              team_name: str = None, league_id: int = None):\n    query = db.query(models.Team)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Team.last_changed_date >= min_last_changed_date)\n    if team_name: \n        query = query.filter(models.Team.team_name == team_name)\n    if league_id: ",
        "detail": "chapter4.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_player_count",
        "kind": 2,
        "importPath": "chapter4.complete.crud",
        "description": "chapter4.complete.crud",
        "peekOfCode": "def get_player_count(db: Session):\n    query = db.query(models.Player)\n    return query.count()\ndef get_team_count(db: Session):\n    query = db.query(models.Team)\n    return query.count()\ndef get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter4.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_team_count",
        "kind": 2,
        "importPath": "chapter4.complete.crud",
        "description": "chapter4.complete.crud",
        "peekOfCode": "def get_team_count(db: Session):\n    query = db.query(models.Team)\n    return query.count()\ndef get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter4.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_league_count",
        "kind": 2,
        "importPath": "chapter4.complete.crud",
        "description": "chapter4.complete.crud",
        "peekOfCode": "def get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter4.complete.crud",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "chapter4.complete.database",
        "description": "chapter4.complete.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"sqlite:///./fantasy_data.db\"\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter4.complete.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "chapter4.complete.database",
        "description": "chapter4.complete.database",
        "peekOfCode": "engine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter4.complete.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "chapter4.complete.database",
        "description": "chapter4.complete.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter4.complete.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "chapter4.complete.database",
        "description": "chapter4.complete.database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "chapter4.complete.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "chapter4.complete.main",
        "description": "chapter4.complete.main",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"API health check successful\"}\n@app.get(\"/v0/players/\", response_model=list[schemas.Player])",
        "detail": "chapter4.complete.main",
        "documentation": {}
    },
    {
        "label": "read_players",
        "kind": 2,
        "importPath": "chapter4.complete.main",
        "description": "chapter4.complete.main",
        "peekOfCode": "def read_players(\n    skip: int = 0,\n    limit: int = 100,\n    minimum_last_changed_date: date = None,\n    first_name: str = None,\n    last_name: str = None,\n    db: Session = Depends(get_db),\n):\n    players = crud.get_players(\n        db,",
        "detail": "chapter4.complete.main",
        "documentation": {}
    },
    {
        "label": "read_player",
        "kind": 2,
        "importPath": "chapter4.complete.main",
        "description": "chapter4.complete.main",
        "peekOfCode": "def read_player(player_id: int, db: Session = Depends(get_db)):\n    player = crud.get_player(db, player_id=player_id)\n    if player is None:\n        raise HTTPException(status_code=404, detail=\"Player not found\")\n    return player\n@app.get(\"/v0/performances/\", response_model=list[schemas.Performance])\ndef read_performances(\n    skip: int = 0,\n    limit: int = 100,\n    minimum_last_changed_date: date = None,",
        "detail": "chapter4.complete.main",
        "documentation": {}
    },
    {
        "label": "read_performances",
        "kind": 2,
        "importPath": "chapter4.complete.main",
        "description": "chapter4.complete.main",
        "peekOfCode": "def read_performances(\n    skip: int = 0,\n    limit: int = 100,\n    minimum_last_changed_date: date = None,\n    db: Session = Depends(get_db),\n):\n    performances = crud.get_performances(\n        db, skip=skip, limit=limit, min_last_changed_date=minimum_last_changed_date\n    )\n    return performances",
        "detail": "chapter4.complete.main",
        "documentation": {}
    },
    {
        "label": "read_league",
        "kind": 2,
        "importPath": "chapter4.complete.main",
        "description": "chapter4.complete.main",
        "peekOfCode": "def read_league(league_id: int, db: Session = Depends(get_db)):\n    league = crud.get_league(db, league_id=league_id)\n    if league is None:\n        raise HTTPException(status_code=404, detail=\"League not found\")\n    return league\n@app.get(\"/v0/leagues/\", response_model=list[schemas.League])\ndef read_leagues(\n    skip: int = 0,\n    limit: int = 100,\n    minimum_last_changed_date: date = None,",
        "detail": "chapter4.complete.main",
        "documentation": {}
    },
    {
        "label": "read_leagues",
        "kind": 2,
        "importPath": "chapter4.complete.main",
        "description": "chapter4.complete.main",
        "peekOfCode": "def read_leagues(\n    skip: int = 0,\n    limit: int = 100,\n    minimum_last_changed_date: date = None,\n    league_name: str = None,\n    db: Session = Depends(get_db),\n):\n    leagues = crud.get_leagues(\n        db,\n        skip=skip,",
        "detail": "chapter4.complete.main",
        "documentation": {}
    },
    {
        "label": "read_teams",
        "kind": 2,
        "importPath": "chapter4.complete.main",
        "description": "chapter4.complete.main",
        "peekOfCode": "def read_teams(\n    skip: int = 0,\n    limit: int = 100,\n    minimum_last_changed_date: date = None,\n    team_name: str = None,\n    league_id: int = None,\n    db: Session = Depends(get_db),\n):\n    teams = crud.get_teams(\n        db,",
        "detail": "chapter4.complete.main",
        "documentation": {}
    },
    {
        "label": "get_count",
        "kind": 2,
        "importPath": "chapter4.complete.main",
        "description": "chapter4.complete.main",
        "peekOfCode": "def get_count(db: Session = Depends(get_db)):\n    counts = schemas.Counts(\n        league_count=crud.get_league_count(db),\n        team_count=crud.get_team_count(db),\n        player_count=crud.get_player_count(db),\n    )\n    return counts",
        "detail": "chapter4.complete.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "chapter4.complete.main",
        "description": "chapter4.complete.main",
        "peekOfCode": "app = FastAPI()\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n@app.get(\"/\")\nasync def root():",
        "detail": "chapter4.complete.main",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "chapter4.complete.models",
        "description": "chapter4.complete.models",
        "peekOfCode": "class Player(Base):\n    __tablename__ = \"player\"\n    player_id = Column(Integer, primary_key=True, index=True)\n    gsis_id = Column(String, nullable=True)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    position = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    performances = relationship(\"Performance\", back_populates=\"player\")\n    # Many-to-many relationship between Player and Team tables",
        "detail": "chapter4.complete.models",
        "documentation": {}
    },
    {
        "label": "Performance",
        "kind": 6,
        "importPath": "chapter4.complete.models",
        "description": "chapter4.complete.models",
        "peekOfCode": "class Performance(Base):\n    __tablename__ = \"performance\"\n    performance_id = Column(Integer, primary_key=True, index=True)\n    week_number = Column(String, nullable=False)\n    fantasy_points = Column(Float, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    player_id = Column(Integer, ForeignKey(\"player.player_id\"))\n    player = relationship(\"Player\", back_populates=\"performances\")\nclass League(Base):\n    __tablename__ = \"league\"",
        "detail": "chapter4.complete.models",
        "documentation": {}
    },
    {
        "label": "League",
        "kind": 6,
        "importPath": "chapter4.complete.models",
        "description": "chapter4.complete.models",
        "peekOfCode": "class League(Base):\n    __tablename__ = \"league\"\n    league_id = Column(Integer, primary_key=True, index=True)\n    league_name = Column(String, nullable=False)\n    scoring_type = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    teams = relationship(\"Team\", back_populates=\"league\")\nclass Team(Base):\n    __tablename__ = \"team\"\n    team_id = Column(Integer, primary_key=True, index=True)",
        "detail": "chapter4.complete.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "chapter4.complete.models",
        "description": "chapter4.complete.models",
        "peekOfCode": "class Team(Base):\n    __tablename__ = \"team\"\n    team_id = Column(Integer, primary_key=True, index=True)\n    team_name = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)    \n    league_id = Column(Integer, ForeignKey(\"league.league_id\"))\n    league = relationship(\"League\", back_populates=\"teams\")\n    players = relationship(\"Player\", secondary=\"team_player\", \n                           back_populates=\"teams\")\nclass TeamPlayer(Base):",
        "detail": "chapter4.complete.models",
        "documentation": {}
    },
    {
        "label": "TeamPlayer",
        "kind": 6,
        "importPath": "chapter4.complete.models",
        "description": "chapter4.complete.models",
        "peekOfCode": "class TeamPlayer(Base):\n    __tablename__ = \"team_player\"\n    team_id = Column(Integer, ForeignKey(\"team.team_id\"), \n                     primary_key=True, index=True)\n    player_id = Column(Integer, ForeignKey(\"player.player_id\"), \n                       primary_key=True, index=True)\n    last_changed_date = Column(Date, nullable=False)",
        "detail": "chapter4.complete.models",
        "documentation": {}
    },
    {
        "label": "Performance",
        "kind": 6,
        "importPath": "chapter4.complete.schemas",
        "description": "chapter4.complete.schemas",
        "peekOfCode": "class Performance(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    performance_id: int\n    player_id: int\n    week_number: str\n    fantasy_points: float\n    last_changed_date: date\nclass PlayerBase(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    player_id: int",
        "detail": "chapter4.complete.schemas",
        "documentation": {}
    },
    {
        "label": "PlayerBase",
        "kind": 6,
        "importPath": "chapter4.complete.schemas",
        "description": "chapter4.complete.schemas",
        "peekOfCode": "class PlayerBase(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    player_id: int\n    gsis_id: str\n    first_name: str\n    last_name: str\n    position: str\n    last_changed_date: date\nclass Player(PlayerBase):\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "chapter4.complete.schemas",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "chapter4.complete.schemas",
        "description": "chapter4.complete.schemas",
        "peekOfCode": "class Player(PlayerBase):\n    model_config = ConfigDict(from_attributes=True)\n    performances: List[Performance] = []\nclass TeamBase(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    league_id: int\n    team_id: int\n    team_name: str\n    last_changed_date: date\nclass Team(TeamBase):",
        "detail": "chapter4.complete.schemas",
        "documentation": {}
    },
    {
        "label": "TeamBase",
        "kind": 6,
        "importPath": "chapter4.complete.schemas",
        "description": "chapter4.complete.schemas",
        "peekOfCode": "class TeamBase(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    league_id: int\n    team_id: int\n    team_name: str\n    last_changed_date: date\nclass Team(TeamBase):\n    model_config = ConfigDict(from_attributes=True)\n    players: List[PlayerBase] = []\nclass League(BaseModel):",
        "detail": "chapter4.complete.schemas",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "chapter4.complete.schemas",
        "description": "chapter4.complete.schemas",
        "peekOfCode": "class Team(TeamBase):\n    model_config = ConfigDict(from_attributes=True)\n    players: List[PlayerBase] = []\nclass League(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    league_id: int\n    league_name: str\n    scoring_type: str\n    last_changed_date: date\n    teams: List[TeamBase] = []",
        "detail": "chapter4.complete.schemas",
        "documentation": {}
    },
    {
        "label": "League",
        "kind": 6,
        "importPath": "chapter4.complete.schemas",
        "description": "chapter4.complete.schemas",
        "peekOfCode": "class League(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    league_id: int\n    league_name: str\n    scoring_type: str\n    last_changed_date: date\n    teams: List[TeamBase] = []\nclass Counts(BaseModel):\n    league_count: int\n    team_count: int",
        "detail": "chapter4.complete.schemas",
        "documentation": {}
    },
    {
        "label": "Counts",
        "kind": 6,
        "importPath": "chapter4.complete.schemas",
        "description": "chapter4.complete.schemas",
        "peekOfCode": "class Counts(BaseModel):\n    league_count: int\n    team_count: int\n    player_count: int",
        "detail": "chapter4.complete.schemas",
        "documentation": {}
    },
    {
        "label": "db_session",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def db_session():\n    \"\"\"This starts a database session and closes it when done\"\"\"\n    session = SessionLocal()\n    yield session\n    session.close()\ndef test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id = 1001)\n    assert player.player_id == 1001\ndef test_get_players(db_session):",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_player",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id = 1001)\n    assert player.player_id == 1001\ndef test_get_players(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, skip=0, limit=10000,\n                                min_last_changed_date=test_date)\n    assert len(players) == 1018\ndef test_get_players_by_name(db_session):",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_players",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_players(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, skip=0, limit=10000,\n                                min_last_changed_date=test_date)\n    assert len(players) == 1018\ndef test_get_players_by_name(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, first_name=\"Bryce\", last_name=\"Young\")\n    assert len(players) == 1\n    assert players[0].player_id == 2009",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_players_by_name",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_players_by_name(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, first_name=\"Bryce\", last_name=\"Young\")\n    assert len(players) == 1\n    assert players[0].player_id == 2009\ndef test_get_all_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected - all the performances\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=18000)\n    assert len(performances) == 17306",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_all_performances",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_all_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected - all the performances\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=18000)\n    assert len(performances) == 17306\ndef test_get_new_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=10000, \n                                         min_last_changed_date=test_date)",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_new_performances",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_new_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=10000, \n                                         min_last_changed_date=test_date)\n    assert len(performances) == 2711\ndef test_get_league(db_session):\n    \"\"\"Tests you can get a league\"\"\"\n    league = crud.get_league(db_session, league_id = 5002)\n    assert league.league_id == 5002",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_league",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_league(db_session):\n    \"\"\"Tests you can get a league\"\"\"\n    league = crud.get_league(db_session, league_id = 5002)\n    assert league.league_id == 5002\n    assert len(league.teams) == 8\ndef test_get_leagues(db_session):\n    \"\"\"Tests that the count of leagues in the database is what is expected\"\"\"\n    leagues = crud.get_leagues(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(leagues) == 5\ndef test_get_teams(db_session):",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_leagues",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_leagues(db_session):\n    \"\"\"Tests that the count of leagues in the database is what is expected\"\"\"\n    leagues = crud.get_leagues(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(leagues) == 5\ndef test_get_teams(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(teams) == 20\ndef test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_teams",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_teams(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(teams) == 20\ndef test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, league_id=5001)\n    assert len(teams) == 12\n    assert teams[0].league_id == 5001\ndef test_get_team_players(db_session):",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_teams_for_one_league",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, league_id=5001)\n    assert len(teams) == 12\n    assert teams[0].league_id == 5001\ndef test_get_team_players(db_session):\n    \"\"\"Tests that a team record can retrieve players, and that 8 players are on the first team\"\"\"\n    first_team = crud.get_teams(db_session, skip=0, limit=1000, min_last_changed_date=test_date)[0]\n    assert len(first_team.players) == 7\n#test the count functions",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_team_players",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_team_players(db_session):\n    \"\"\"Tests that a team record can retrieve players, and that 8 players are on the first team\"\"\"\n    first_team = crud.get_teams(db_session, skip=0, limit=1000, min_last_changed_date=test_date)[0]\n    assert len(first_team.players) == 7\n#test the count functions\ndef test_get_player_count(db_session):\n    player_count = crud.get_player_count(db_session)\n    assert player_count == 1018\ndef test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_player_count",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_player_count(db_session):\n    player_count = crud.get_player_count(db_session)\n    assert player_count == 1018\ndef test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)\n    assert team_count == 20\ndef test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_team_count",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)\n    assert team_count == 20\ndef test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_league_count",
        "kind": 2,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "def test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_date",
        "kind": 5,
        "importPath": "chapter4.complete.test_crud",
        "description": "chapter4.complete.test_crud",
        "peekOfCode": "test_date = date(2024,4,1)\n@pytest.fixture(scope=\"function\")\ndef db_session():\n    \"\"\"This starts a database session and closes it when done\"\"\"\n    session = SessionLocal()\n    yield session\n    session.close()\ndef test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id = 1001)",
        "detail": "chapter4.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_read_main",
        "kind": 2,
        "importPath": "chapter4.complete.test_main",
        "description": "chapter4.complete.test_main",
        "peekOfCode": "def test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"API health check successful\"}\n# test /v0/players/\ndef test_read_players():\n    response = client.get(\"/v0/players/?skip=0&limit=10000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1018\ndef test_read_players_by_name():",
        "detail": "chapter4.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_players",
        "kind": 2,
        "importPath": "chapter4.complete.test_main",
        "description": "chapter4.complete.test_main",
        "peekOfCode": "def test_read_players():\n    response = client.get(\"/v0/players/?skip=0&limit=10000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1018\ndef test_read_players_by_name():\n    response = client.get(\"/v0/players/?first_name=Bryce&last_name=Young\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1\n    assert response.json()[0].get(\"player_id\") == 2009\n# test /v0/players/{player_id}/",
        "detail": "chapter4.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_players_by_name",
        "kind": 2,
        "importPath": "chapter4.complete.test_main",
        "description": "chapter4.complete.test_main",
        "peekOfCode": "def test_read_players_by_name():\n    response = client.get(\"/v0/players/?first_name=Bryce&last_name=Young\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1\n    assert response.json()[0].get(\"player_id\") == 2009\n# test /v0/players/{player_id}/\ndef test_read_players_with_id():\n    response = client.get(\"/v0/players/1001/\")\n    assert response.status_code == 200\n    assert response.json().get(\"player_id\") == 1001",
        "detail": "chapter4.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_players_with_id",
        "kind": 2,
        "importPath": "chapter4.complete.test_main",
        "description": "chapter4.complete.test_main",
        "peekOfCode": "def test_read_players_with_id():\n    response = client.get(\"/v0/players/1001/\")\n    assert response.status_code == 200\n    assert response.json().get(\"player_id\") == 1001\n# test /v0/performances/\ndef test_read_performances():\n    response = client.get(\"/v0/performances/?skip=0&limit=20000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 17306\n# test /v0/performances/ with changed date",
        "detail": "chapter4.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_performances",
        "kind": 2,
        "importPath": "chapter4.complete.test_main",
        "description": "chapter4.complete.test_main",
        "peekOfCode": "def test_read_performances():\n    response = client.get(\"/v0/performances/?skip=0&limit=20000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 17306\n# test /v0/performances/ with changed date\ndef test_read_performances_by_date():\n    response = client.get(\n        \"/v0/performances/?skip=0&limit=20000&minimum_last_changed_date=2024-04-01\"\n    )\n    assert response.status_code == 200",
        "detail": "chapter4.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_performances_by_date",
        "kind": 2,
        "importPath": "chapter4.complete.test_main",
        "description": "chapter4.complete.test_main",
        "peekOfCode": "def test_read_performances_by_date():\n    response = client.get(\n        \"/v0/performances/?skip=0&limit=20000&minimum_last_changed_date=2024-04-01\"\n    )\n    assert response.status_code == 200\n    assert len(response.json()) == 2711\n# test /v0/leagues/{league_id}/\ndef test_read_leagues_with_id():\n    response = client.get(\"/v0/leagues/5002/\")\n    assert response.status_code == 200",
        "detail": "chapter4.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_leagues_with_id",
        "kind": 2,
        "importPath": "chapter4.complete.test_main",
        "description": "chapter4.complete.test_main",
        "peekOfCode": "def test_read_leagues_with_id():\n    response = client.get(\"/v0/leagues/5002/\")\n    assert response.status_code == 200\n    assert len(response.json()[\"teams\"]) == 8\n# test /v0/leagues/\ndef test_read_leagues():\n    response = client.get(\"/v0/leagues/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 5\n# test /v0/teams/",
        "detail": "chapter4.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_leagues",
        "kind": 2,
        "importPath": "chapter4.complete.test_main",
        "description": "chapter4.complete.test_main",
        "peekOfCode": "def test_read_leagues():\n    response = client.get(\"/v0/leagues/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 5\n# test /v0/teams/\ndef test_read_teams():\n    response = client.get(\"/v0/teams/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 20\n# test /v0/teams/",
        "detail": "chapter4.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_teams",
        "kind": 2,
        "importPath": "chapter4.complete.test_main",
        "description": "chapter4.complete.test_main",
        "peekOfCode": "def test_read_teams():\n    response = client.get(\"/v0/teams/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 20\n# test /v0/teams/\ndef test_read_teams_for_one_league():\n    response = client.get(\"/v0/teams/?skip=0&limit=500&league_id=5001\")\n    assert response.status_code == 200\n    assert len(response.json()) == 12\n# test the count functions",
        "detail": "chapter4.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_teams_for_one_league",
        "kind": 2,
        "importPath": "chapter4.complete.test_main",
        "description": "chapter4.complete.test_main",
        "peekOfCode": "def test_read_teams_for_one_league():\n    response = client.get(\"/v0/teams/?skip=0&limit=500&league_id=5001\")\n    assert response.status_code == 200\n    assert len(response.json()) == 12\n# test the count functions\ndef test_counts():\n    response = client.get(\"/v0/counts/\")\n    response_data = response.json()\n    assert response.status_code == 200\n    assert response_data[\"league_count\"] == 5",
        "detail": "chapter4.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_counts",
        "kind": 2,
        "importPath": "chapter4.complete.test_main",
        "description": "chapter4.complete.test_main",
        "peekOfCode": "def test_counts():\n    response = client.get(\"/v0/counts/\")\n    response_data = response.json()\n    assert response.status_code == 200\n    assert response_data[\"league_count\"] == 5\n    assert response_data[\"team_count\"] == 20\n    assert response_data[\"player_count\"] == 1018",
        "detail": "chapter4.complete.test_main",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "chapter4.complete.test_main",
        "description": "chapter4.complete.test_main",
        "peekOfCode": "client = TestClient(app)\n# test the health check endpoint\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"API health check successful\"}\n# test /v0/players/\ndef test_read_players():\n    response = client.get(\"/v0/players/?skip=0&limit=10000\")\n    assert response.status_code == 200",
        "detail": "chapter4.complete.test_main",
        "documentation": {}
    },
    {
        "label": "get_player",
        "kind": 2,
        "importPath": "chapter5.complete.crud",
        "description": "chapter5.complete.crud",
        "peekOfCode": "def get_player(db: Session, player_id: int):\n    return db.query(models.Player).filter(\n        models.Player.player_id == player_id).first()\ndef get_players(db: Session, skip: int = 0, limit: int = 100, \n                min_last_changed_date: date = None, \n                last_name : str = None, first_name : str = None, ):\n    query = db.query(models.Player)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Player.last_changed_date >= min_last_changed_date)",
        "detail": "chapter5.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_players",
        "kind": 2,
        "importPath": "chapter5.complete.crud",
        "description": "chapter5.complete.crud",
        "peekOfCode": "def get_players(db: Session, skip: int = 0, limit: int = 100, \n                min_last_changed_date: date = None, \n                last_name : str = None, first_name : str = None, ):\n    query = db.query(models.Player)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Player.last_changed_date >= min_last_changed_date)\n    if first_name:\n        query = query.filter(models.Player.first_name == first_name)\n    if last_name:",
        "detail": "chapter5.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_performances",
        "kind": 2,
        "importPath": "chapter5.complete.crud",
        "description": "chapter5.complete.crud",
        "peekOfCode": "def get_performances(db: Session, skip: int = 0, limit: int = 100, \n                     min_last_changed_date: date = None):\n    query = db.query(models.Performance)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Performance.last_changed_date >= min_last_changed_date)\n    return query.offset(skip).limit(limit).all()\ndef get_league(db: Session, league_id: int = None):\n    return db.query(models.League).filter(\n        models.League.league_id == league_id).first()",
        "detail": "chapter5.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_league",
        "kind": 2,
        "importPath": "chapter5.complete.crud",
        "description": "chapter5.complete.crud",
        "peekOfCode": "def get_league(db: Session, league_id: int = None):\n    return db.query(models.League).filter(\n        models.League.league_id == league_id).first()\ndef get_leagues(db: Session, skip: int = 0, limit: int = 100,\n                 min_last_changed_date: date = None,league_name: str = None):\n    query = db.query(models.League\n                    ).options(joinedload(models.League.teams))\n    if min_last_changed_date:\n        query = query.filter(\n            models.League.last_changed_date >= min_last_changed_date)                              ",
        "detail": "chapter5.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_leagues",
        "kind": 2,
        "importPath": "chapter5.complete.crud",
        "description": "chapter5.complete.crud",
        "peekOfCode": "def get_leagues(db: Session, skip: int = 0, limit: int = 100,\n                 min_last_changed_date: date = None,league_name: str = None):\n    query = db.query(models.League\n                    ).options(joinedload(models.League.teams))\n    if min_last_changed_date:\n        query = query.filter(\n            models.League.last_changed_date >= min_last_changed_date)                              \n    if league_name: \n        query = query.filter(models.League.league_name == league_name)     \n    return query.offset(skip).limit(limit).all()",
        "detail": "chapter5.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_teams",
        "kind": 2,
        "importPath": "chapter5.complete.crud",
        "description": "chapter5.complete.crud",
        "peekOfCode": "def get_teams(db: Session, skip: int = 0, limit: int = 100, \n              min_last_changed_date: date = None, \n              team_name: str = None, league_id: int = None):\n    query = db.query(models.Team)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Team.last_changed_date >= min_last_changed_date)\n    if team_name: \n        query = query.filter(models.Team.team_name == team_name)\n    if league_id: ",
        "detail": "chapter5.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_player_count",
        "kind": 2,
        "importPath": "chapter5.complete.crud",
        "description": "chapter5.complete.crud",
        "peekOfCode": "def get_player_count(db: Session):\n    query = db.query(models.Player)\n    return query.count()\ndef get_team_count(db: Session):\n    query = db.query(models.Team)\n    return query.count()\ndef get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter5.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_team_count",
        "kind": 2,
        "importPath": "chapter5.complete.crud",
        "description": "chapter5.complete.crud",
        "peekOfCode": "def get_team_count(db: Session):\n    query = db.query(models.Team)\n    return query.count()\ndef get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter5.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_league_count",
        "kind": 2,
        "importPath": "chapter5.complete.crud",
        "description": "chapter5.complete.crud",
        "peekOfCode": "def get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter5.complete.crud",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "chapter5.complete.database",
        "description": "chapter5.complete.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"sqlite:///./fantasy_data.db\"\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter5.complete.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "chapter5.complete.database",
        "description": "chapter5.complete.database",
        "peekOfCode": "engine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter5.complete.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "chapter5.complete.database",
        "description": "chapter5.complete.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter5.complete.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "chapter5.complete.database",
        "description": "chapter5.complete.database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "chapter5.complete.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "chapter5.complete.main",
        "description": "chapter5.complete.main",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n@app.get(\n    \"/\",\n    summary=\"Check to see if the SWC fantasy football API is running\",\n    description=\"\"\"Use this endpoint to check if the API is running. You can also check it first before making other calls to be sure it's running.\"\"\",",
        "detail": "chapter5.complete.main",
        "documentation": {}
    },
    {
        "label": "read_players",
        "kind": 2,
        "importPath": "chapter5.complete.main",
        "description": "chapter5.complete.main",
        "peekOfCode": "def read_players(\n    skip: int = Query(\n        0, description=\"The number of items to skip at the beginning of API call.\"\n    ),\n    limit: int = Query(\n        100, description=\"The number of records to return after the skipped records.\"\n    ),\n    minimum_last_changed_date: date = Query(\n        None,\n        description=\"The minimum data of change that you want to return records. Exclude any records changed before this.\",",
        "detail": "chapter5.complete.main",
        "documentation": {}
    },
    {
        "label": "read_player",
        "kind": 2,
        "importPath": "chapter5.complete.main",
        "description": "chapter5.complete.main",
        "peekOfCode": "def read_player(player_id: int, db: Session = Depends(get_db)):\n    player = crud.get_player(db, player_id=player_id)\n    if player is None:\n        raise HTTPException(status_code=404, detail=\"Player not found\")\n    return player\n@app.get(\n    \"/v0/performances/\",\n    response_model=list[schemas.Performance],\n    summary=\"Get all the weekly performances that meet all the parameters you sent with your request\",\n    description=\"\"\"Use this endpoint to get lists of weekly performances by players in the SWC. You us the skip and limit to perform pagination of the API. Don't use the Performance ID for counting or logic, because that is an internal ID and is not guaranteed to be sequential\"\"\",",
        "detail": "chapter5.complete.main",
        "documentation": {}
    },
    {
        "label": "read_performances",
        "kind": 2,
        "importPath": "chapter5.complete.main",
        "description": "chapter5.complete.main",
        "peekOfCode": "def read_performances(\n    skip: int = Query(\n        0, description=\"The number of items to skip at the beginning of API call.\"\n    ),\n    limit: int = Query(\n        100, description=\"The number of records to return after the skipped records.\"\n    ),\n    minimum_last_changed_date: date = Query(\n        None,\n        description=\"The minimum data of change that you want to return records. Exclude any records changed before this.\",",
        "detail": "chapter5.complete.main",
        "documentation": {}
    },
    {
        "label": "read_league",
        "kind": 2,
        "importPath": "chapter5.complete.main",
        "description": "chapter5.complete.main",
        "peekOfCode": "def read_league(league_id: int, db: Session = Depends(get_db)):\n    league = crud.get_league(db, league_id=league_id)\n    if league is None:\n        raise HTTPException(status_code=404, detail=\"League not found\")\n    return league\n@app.get(\n    \"/v0/leagues/\",\n    response_model=list[schemas.League],\n    summary=\"Get all the SWC fantasy football leagues that match the parameters you send\",\n    description=\"\"\"Use this endpoint to get lists of SWC fantasy football leagues. You us the skip and limit to perform pagination of the API. League name is not guaranteed to be unique. Don't use the League ID for counting or logic, because that is an internal ID and is not guaranteed to be sequential\"\"\",",
        "detail": "chapter5.complete.main",
        "documentation": {}
    },
    {
        "label": "read_leagues",
        "kind": 2,
        "importPath": "chapter5.complete.main",
        "description": "chapter5.complete.main",
        "peekOfCode": "def read_leagues(\n    skip: int = Query(\n        0, description=\"The number of items to skip at the beginning of API call.\"\n    ),\n    limit: int = Query(\n        100, description=\"The number of records to return after the skipped records.\"\n    ),\n    minimum_last_changed_date: date = Query(\n        None,\n        description=\"The minimum data of change that you want to return records. Exclude any records changed before this.\",",
        "detail": "chapter5.complete.main",
        "documentation": {}
    },
    {
        "label": "read_teams",
        "kind": 2,
        "importPath": "chapter5.complete.main",
        "description": "chapter5.complete.main",
        "peekOfCode": "def read_teams(\n    skip: int = Query(\n        0, description=\"The number of items to skip at the beginning of API call.\"\n    ),\n    limit: int = Query(\n        100, description=\"The number of records to return after the skipped records.\"\n    ),\n    minimum_last_changed_date: date = Query(\n        None,\n        description=\"The minimum data of change that you want to return records. Exclude any records changed before this.\",",
        "detail": "chapter5.complete.main",
        "documentation": {}
    },
    {
        "label": "get_count",
        "kind": 2,
        "importPath": "chapter5.complete.main",
        "description": "chapter5.complete.main",
        "peekOfCode": "def get_count(db: Session = Depends(get_db)):\n    counts = schemas.Counts(\n        league_count=crud.get_league_count(db),\n        team_count=crud.get_team_count(db),\n        player_count=crud.get_player_count(db),\n    )\n    return counts",
        "detail": "chapter5.complete.main",
        "documentation": {}
    },
    {
        "label": "api_description",
        "kind": 5,
        "importPath": "chapter5.complete.main",
        "description": "chapter5.complete.main",
        "peekOfCode": "api_description = \"\"\"\nThis API provides read-only access to info from the Sports World Central (SWC) Fantasy Football API. \nThe endpoints are grouped into the following categories:\n## Analytics\nGet information about health of the API and counts of leagues, teams, and players.\n## Player\nYou can get a list of an NFL players, or search for an individual player by player_id.\n## Scoring\nYou can get a list of NFL player performances, including the fantasy points they scored using SWC league scoring.\n## Membership",
        "detail": "chapter5.complete.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "chapter5.complete.main",
        "description": "chapter5.complete.main",
        "peekOfCode": "app = FastAPI(\n    description=api_description,\n    title=\"Sports World Central (SWC) Fantasy Football API\",\n    version=\"0.1\",\n)\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "chapter5.complete.main",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "chapter5.complete.models",
        "description": "chapter5.complete.models",
        "peekOfCode": "class Player(Base):\n    __tablename__ = \"player\"\n    player_id = Column(Integer, primary_key=True, index=True)\n    gsis_id = Column(String, nullable=True)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    position = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    performances = relationship(\"Performance\", back_populates=\"player\")\n    # Many-to-many relationship between Player and Team tables",
        "detail": "chapter5.complete.models",
        "documentation": {}
    },
    {
        "label": "Performance",
        "kind": 6,
        "importPath": "chapter5.complete.models",
        "description": "chapter5.complete.models",
        "peekOfCode": "class Performance(Base):\n    __tablename__ = \"performance\"\n    performance_id = Column(Integer, primary_key=True, index=True)\n    week_number = Column(String, nullable=False)\n    fantasy_points = Column(Float, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    player_id = Column(Integer, ForeignKey(\"player.player_id\"))\n    player = relationship(\"Player\", back_populates=\"performances\")\nclass League(Base):\n    __tablename__ = \"league\"",
        "detail": "chapter5.complete.models",
        "documentation": {}
    },
    {
        "label": "League",
        "kind": 6,
        "importPath": "chapter5.complete.models",
        "description": "chapter5.complete.models",
        "peekOfCode": "class League(Base):\n    __tablename__ = \"league\"\n    league_id = Column(Integer, primary_key=True, index=True)\n    league_name = Column(String, nullable=False)\n    scoring_type = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    teams = relationship(\"Team\", back_populates=\"league\")\nclass Team(Base):\n    __tablename__ = \"team\"\n    team_id = Column(Integer, primary_key=True, index=True)",
        "detail": "chapter5.complete.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "chapter5.complete.models",
        "description": "chapter5.complete.models",
        "peekOfCode": "class Team(Base):\n    __tablename__ = \"team\"\n    team_id = Column(Integer, primary_key=True, index=True)\n    team_name = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)    \n    league_id = Column(Integer, ForeignKey(\"league.league_id\"))\n    league = relationship(\"League\", back_populates=\"teams\")\n    players = relationship(\"Player\", secondary=\"team_player\", \n                           back_populates=\"teams\")\nclass TeamPlayer(Base):",
        "detail": "chapter5.complete.models",
        "documentation": {}
    },
    {
        "label": "TeamPlayer",
        "kind": 6,
        "importPath": "chapter5.complete.models",
        "description": "chapter5.complete.models",
        "peekOfCode": "class TeamPlayer(Base):\n    __tablename__ = \"team_player\"\n    team_id = Column(Integer, ForeignKey(\"team.team_id\"), \n                     primary_key=True, index=True)\n    player_id = Column(Integer, ForeignKey(\"player.player_id\"), \n                       primary_key=True, index=True)\n    last_changed_date = Column(Date, nullable=False)",
        "detail": "chapter5.complete.models",
        "documentation": {}
    },
    {
        "label": "Performance",
        "kind": 6,
        "importPath": "chapter5.complete.schemas",
        "description": "chapter5.complete.schemas",
        "peekOfCode": "class Performance(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    performance_id : int\n    player_id : int\n    week_number : str\n    fantasy_points : float\n    last_changed_date : date\nclass PlayerBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)    \n    player_id : int",
        "detail": "chapter5.complete.schemas",
        "documentation": {}
    },
    {
        "label": "PlayerBase",
        "kind": 6,
        "importPath": "chapter5.complete.schemas",
        "description": "chapter5.complete.schemas",
        "peekOfCode": "class PlayerBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)    \n    player_id : int\n    gsis_id: str\n    first_name : str\n    last_name : str\n    position : str\n    last_changed_date : date\nclass Player(PlayerBase):\n    model_config = ConfigDict(from_attributes = True)",
        "detail": "chapter5.complete.schemas",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "chapter5.complete.schemas",
        "description": "chapter5.complete.schemas",
        "peekOfCode": "class Player(PlayerBase):\n    model_config = ConfigDict(from_attributes = True)\n    performances: List[Performance] = []\nclass TeamBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    team_id : int\n    team_name : str\n    last_changed_date : date\nclass Team(TeamBase):",
        "detail": "chapter5.complete.schemas",
        "documentation": {}
    },
    {
        "label": "TeamBase",
        "kind": 6,
        "importPath": "chapter5.complete.schemas",
        "description": "chapter5.complete.schemas",
        "peekOfCode": "class TeamBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    team_id : int\n    team_name : str\n    last_changed_date : date\nclass Team(TeamBase):\n    model_config = ConfigDict(from_attributes = True)\n    players: List[PlayerBase] = []\nclass League(BaseModel):",
        "detail": "chapter5.complete.schemas",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "chapter5.complete.schemas",
        "description": "chapter5.complete.schemas",
        "peekOfCode": "class Team(TeamBase):\n    model_config = ConfigDict(from_attributes = True)\n    players: List[PlayerBase] = []\nclass League(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    league_name : str\n    scoring_type : str\n    last_changed_date : date\n    teams: List[TeamBase] = []",
        "detail": "chapter5.complete.schemas",
        "documentation": {}
    },
    {
        "label": "League",
        "kind": 6,
        "importPath": "chapter5.complete.schemas",
        "description": "chapter5.complete.schemas",
        "peekOfCode": "class League(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    league_name : str\n    scoring_type : str\n    last_changed_date : date\n    teams: List[TeamBase] = []\nclass Counts(BaseModel):\n    league_count : int\n    team_count : int",
        "detail": "chapter5.complete.schemas",
        "documentation": {}
    },
    {
        "label": "Counts",
        "kind": 6,
        "importPath": "chapter5.complete.schemas",
        "description": "chapter5.complete.schemas",
        "peekOfCode": "class Counts(BaseModel):\n    league_count : int\n    team_count : int\n    player_count : int",
        "detail": "chapter5.complete.schemas",
        "documentation": {}
    },
    {
        "label": "db_session",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def db_session():\n    \"\"\"This starts a database session and closes it when done\"\"\"\n    session = SessionLocal()\n    yield session\n    session.close()\ndef test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id = 1001)\n    assert player.player_id == 1001\ndef test_get_players(db_session):",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_player",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id = 1001)\n    assert player.player_id == 1001\ndef test_get_players(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, skip=0, limit=10000,\n                                min_last_changed_date=test_date)\n    assert len(players) == 1018\ndef test_get_players_by_name(db_session):",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_players",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_players(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, skip=0, limit=10000,\n                                min_last_changed_date=test_date)\n    assert len(players) == 1018\ndef test_get_players_by_name(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, first_name=\"Bryce\", last_name=\"Young\")\n    assert len(players) == 1\n    assert players[0].player_id == 2009",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_players_by_name",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_players_by_name(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, first_name=\"Bryce\", last_name=\"Young\")\n    assert len(players) == 1\n    assert players[0].player_id == 2009\ndef test_get_all_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected - all the performances\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=18000)\n    assert len(performances) == 17306",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_all_performances",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_all_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected - all the performances\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=18000)\n    assert len(performances) == 17306\ndef test_get_new_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=10000, \n                                         min_last_changed_date=test_date)",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_new_performances",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_new_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=10000, \n                                         min_last_changed_date=test_date)\n    assert len(performances) == 2711\ndef test_get_league(db_session):\n    \"\"\"Tests you can get a league\"\"\"\n    league = crud.get_league(db_session, league_id = 5002)\n    assert league.league_id == 5002",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_league",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_league(db_session):\n    \"\"\"Tests you can get a league\"\"\"\n    league = crud.get_league(db_session, league_id = 5002)\n    assert league.league_id == 5002\n    assert len(league.teams) == 8\ndef test_get_leagues(db_session):\n    \"\"\"Tests that the count of leagues in the database is what is expected\"\"\"\n    leagues = crud.get_leagues(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(leagues) == 5\ndef test_get_teams(db_session):",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_leagues",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_leagues(db_session):\n    \"\"\"Tests that the count of leagues in the database is what is expected\"\"\"\n    leagues = crud.get_leagues(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(leagues) == 5\ndef test_get_teams(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(teams) == 20\ndef test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_teams",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_teams(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(teams) == 20\ndef test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, league_id=5001)\n    assert len(teams) == 12\n    assert teams[0].league_id == 5001\ndef test_get_team_players(db_session):",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_teams_for_one_league",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, league_id=5001)\n    assert len(teams) == 12\n    assert teams[0].league_id == 5001\ndef test_get_team_players(db_session):\n    \"\"\"Tests that a team record can retrieve players, and that 8 players are on the first team\"\"\"\n    first_team = crud.get_teams(db_session, skip=0, limit=1000, min_last_changed_date=test_date)[0]\n    assert len(first_team.players) == 7\n#test the count functions",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_team_players",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_team_players(db_session):\n    \"\"\"Tests that a team record can retrieve players, and that 8 players are on the first team\"\"\"\n    first_team = crud.get_teams(db_session, skip=0, limit=1000, min_last_changed_date=test_date)[0]\n    assert len(first_team.players) == 7\n#test the count functions\ndef test_get_player_count(db_session):\n    player_count = crud.get_player_count(db_session)\n    assert player_count == 1018\ndef test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_player_count",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_player_count(db_session):\n    player_count = crud.get_player_count(db_session)\n    assert player_count == 1018\ndef test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)\n    assert team_count == 20\ndef test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_team_count",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)\n    assert team_count == 20\ndef test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_league_count",
        "kind": 2,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "def test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_date",
        "kind": 5,
        "importPath": "chapter5.complete.test_crud",
        "description": "chapter5.complete.test_crud",
        "peekOfCode": "test_date = date(2024,4,1)\n@pytest.fixture(scope=\"function\")\ndef db_session():\n    \"\"\"This starts a database session and closes it when done\"\"\"\n    session = SessionLocal()\n    yield session\n    session.close()\ndef test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id = 1001)",
        "detail": "chapter5.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_read_main",
        "kind": 2,
        "importPath": "chapter5.complete.test_main",
        "description": "chapter5.complete.test_main",
        "peekOfCode": "def test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"API health check successful\"}\n# test /v0/players/\ndef test_read_players():\n    response = client.get(\"/v0/players/?skip=0&limit=10000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1018\ndef test_read_players_by_name():",
        "detail": "chapter5.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_players",
        "kind": 2,
        "importPath": "chapter5.complete.test_main",
        "description": "chapter5.complete.test_main",
        "peekOfCode": "def test_read_players():\n    response = client.get(\"/v0/players/?skip=0&limit=10000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1018\ndef test_read_players_by_name():\n    response = client.get(\"/v0/players/?first_name=Bryce&last_name=Young\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1\n    assert response.json()[0].get(\"player_id\") == 2009\n# test /v0/players/{player_id}/",
        "detail": "chapter5.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_players_by_name",
        "kind": 2,
        "importPath": "chapter5.complete.test_main",
        "description": "chapter5.complete.test_main",
        "peekOfCode": "def test_read_players_by_name():\n    response = client.get(\"/v0/players/?first_name=Bryce&last_name=Young\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1\n    assert response.json()[0].get(\"player_id\") == 2009\n# test /v0/players/{player_id}/\ndef test_read_players_with_id():\n    response = client.get(\"/v0/players/1001/\")\n    assert response.status_code == 200\n    assert response.json().get(\"player_id\") == 1001",
        "detail": "chapter5.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_players_with_id",
        "kind": 2,
        "importPath": "chapter5.complete.test_main",
        "description": "chapter5.complete.test_main",
        "peekOfCode": "def test_read_players_with_id():\n    response = client.get(\"/v0/players/1001/\")\n    assert response.status_code == 200\n    assert response.json().get(\"player_id\") == 1001\n# test /v0/performances/\ndef test_read_performances():\n    response = client.get(\"/v0/performances/?skip=0&limit=20000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 17306\n# test /v0/performances/ with changed date",
        "detail": "chapter5.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_performances",
        "kind": 2,
        "importPath": "chapter5.complete.test_main",
        "description": "chapter5.complete.test_main",
        "peekOfCode": "def test_read_performances():\n    response = client.get(\"/v0/performances/?skip=0&limit=20000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 17306\n# test /v0/performances/ with changed date\ndef test_read_performances_by_date():\n    response = client.get(\n        \"/v0/performances/?skip=0&limit=20000&minimum_last_changed_date=2024-04-01\"\n    )\n    assert response.status_code == 200",
        "detail": "chapter5.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_performances_by_date",
        "kind": 2,
        "importPath": "chapter5.complete.test_main",
        "description": "chapter5.complete.test_main",
        "peekOfCode": "def test_read_performances_by_date():\n    response = client.get(\n        \"/v0/performances/?skip=0&limit=20000&minimum_last_changed_date=2024-04-01\"\n    )\n    assert response.status_code == 200\n    assert len(response.json()) == 2711\n# test /v0/leagues/{league_id}/\ndef test_read_leagues_with_id():\n    response = client.get(\"/v0/leagues/5002/\")\n    assert response.status_code == 200",
        "detail": "chapter5.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_leagues_with_id",
        "kind": 2,
        "importPath": "chapter5.complete.test_main",
        "description": "chapter5.complete.test_main",
        "peekOfCode": "def test_read_leagues_with_id():\n    response = client.get(\"/v0/leagues/5002/\")\n    assert response.status_code == 200\n    assert len(response.json()[\"teams\"]) == 8\n# test /v0/leagues/\ndef test_read_leagues():\n    response = client.get(\"/v0/leagues/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 5\n# test /v0/teams/",
        "detail": "chapter5.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_leagues",
        "kind": 2,
        "importPath": "chapter5.complete.test_main",
        "description": "chapter5.complete.test_main",
        "peekOfCode": "def test_read_leagues():\n    response = client.get(\"/v0/leagues/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 5\n# test /v0/teams/\ndef test_read_teams():\n    response = client.get(\"/v0/teams/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 20\n# test /v0/teams/",
        "detail": "chapter5.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_teams",
        "kind": 2,
        "importPath": "chapter5.complete.test_main",
        "description": "chapter5.complete.test_main",
        "peekOfCode": "def test_read_teams():\n    response = client.get(\"/v0/teams/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 20\n# test /v0/teams/\ndef test_read_teams_for_one_league():\n    response = client.get(\"/v0/teams/?skip=0&limit=500&league_id=5001\")\n    assert response.status_code == 200\n    assert len(response.json()) == 12\n# test the count functions",
        "detail": "chapter5.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_teams_for_one_league",
        "kind": 2,
        "importPath": "chapter5.complete.test_main",
        "description": "chapter5.complete.test_main",
        "peekOfCode": "def test_read_teams_for_one_league():\n    response = client.get(\"/v0/teams/?skip=0&limit=500&league_id=5001\")\n    assert response.status_code == 200\n    assert len(response.json()) == 12\n# test the count functions\ndef test_counts():\n    response = client.get(\"/v0/counts/\")\n    response_data = response.json()\n    assert response.status_code == 200\n    assert response_data[\"league_count\"] == 5",
        "detail": "chapter5.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_counts",
        "kind": 2,
        "importPath": "chapter5.complete.test_main",
        "description": "chapter5.complete.test_main",
        "peekOfCode": "def test_counts():\n    response = client.get(\"/v0/counts/\")\n    response_data = response.json()\n    assert response.status_code == 200\n    assert response_data[\"league_count\"] == 5\n    assert response_data[\"team_count\"] == 20\n    assert response_data[\"player_count\"] == 1018",
        "detail": "chapter5.complete.test_main",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "chapter5.complete.test_main",
        "description": "chapter5.complete.test_main",
        "peekOfCode": "client = TestClient(app)\n# test the health check endpoint\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"API health check successful\"}\n# test /v0/players/\ndef test_read_players():\n    response = client.get(\"/v0/players/?skip=0&limit=10000\")\n    assert response.status_code == 200",
        "detail": "chapter5.complete.test_main",
        "documentation": {}
    },
    {
        "label": "get_player",
        "kind": 2,
        "importPath": "chapter6.complete.crud",
        "description": "chapter6.complete.crud",
        "peekOfCode": "def get_player(db: Session, player_id: int):\n    return db.query(models.Player).filter(\n        models.Player.player_id == player_id).first()\ndef get_players(db: Session, skip: int = 0, limit: int = 100, \n                min_last_changed_date: date = None, \n                last_name : str = None, first_name : str = None, ):\n    query = db.query(models.Player)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Player.last_changed_date >= min_last_changed_date)",
        "detail": "chapter6.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_players",
        "kind": 2,
        "importPath": "chapter6.complete.crud",
        "description": "chapter6.complete.crud",
        "peekOfCode": "def get_players(db: Session, skip: int = 0, limit: int = 100, \n                min_last_changed_date: date = None, \n                last_name : str = None, first_name : str = None, ):\n    query = db.query(models.Player)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Player.last_changed_date >= min_last_changed_date)\n    if first_name:\n        query = query.filter(models.Player.first_name == first_name)\n    if last_name:",
        "detail": "chapter6.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_performances",
        "kind": 2,
        "importPath": "chapter6.complete.crud",
        "description": "chapter6.complete.crud",
        "peekOfCode": "def get_performances(db: Session, skip: int = 0, limit: int = 100, \n                     min_last_changed_date: date = None):\n    query = db.query(models.Performance)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Performance.last_changed_date >= min_last_changed_date)\n    return query.offset(skip).limit(limit).all()\ndef get_league(db: Session, league_id: int = None):\n    return db.query(models.League).filter(\n        models.League.league_id == league_id).first()",
        "detail": "chapter6.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_league",
        "kind": 2,
        "importPath": "chapter6.complete.crud",
        "description": "chapter6.complete.crud",
        "peekOfCode": "def get_league(db: Session, league_id: int = None):\n    return db.query(models.League).filter(\n        models.League.league_id == league_id).first()\ndef get_leagues(db: Session, skip: int = 0, limit: int = 100,\n                 min_last_changed_date: date = None,league_name: str = None):\n    query = db.query(models.League\n                    ).options(joinedload(models.League.teams))\n    if min_last_changed_date:\n        query = query.filter(\n            models.League.last_changed_date >= min_last_changed_date)                              ",
        "detail": "chapter6.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_leagues",
        "kind": 2,
        "importPath": "chapter6.complete.crud",
        "description": "chapter6.complete.crud",
        "peekOfCode": "def get_leagues(db: Session, skip: int = 0, limit: int = 100,\n                 min_last_changed_date: date = None,league_name: str = None):\n    query = db.query(models.League\n                    ).options(joinedload(models.League.teams))\n    if min_last_changed_date:\n        query = query.filter(\n            models.League.last_changed_date >= min_last_changed_date)                              \n    if league_name: \n        query = query.filter(models.League.league_name == league_name)     \n    return query.offset(skip).limit(limit).all()",
        "detail": "chapter6.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_teams",
        "kind": 2,
        "importPath": "chapter6.complete.crud",
        "description": "chapter6.complete.crud",
        "peekOfCode": "def get_teams(db: Session, skip: int = 0, limit: int = 100, \n              min_last_changed_date: date = None, \n              team_name: str = None, league_id: int = None):\n    query = db.query(models.Team)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Team.last_changed_date >= min_last_changed_date)\n    if team_name: \n        query = query.filter(models.Team.team_name == team_name)\n    if league_id: ",
        "detail": "chapter6.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_player_count",
        "kind": 2,
        "importPath": "chapter6.complete.crud",
        "description": "chapter6.complete.crud",
        "peekOfCode": "def get_player_count(db: Session):\n    query = db.query(models.Player)\n    return query.count()\ndef get_team_count(db: Session):\n    query = db.query(models.Team)\n    return query.count()\ndef get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter6.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_team_count",
        "kind": 2,
        "importPath": "chapter6.complete.crud",
        "description": "chapter6.complete.crud",
        "peekOfCode": "def get_team_count(db: Session):\n    query = db.query(models.Team)\n    return query.count()\ndef get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter6.complete.crud",
        "documentation": {}
    },
    {
        "label": "get_league_count",
        "kind": 2,
        "importPath": "chapter6.complete.crud",
        "description": "chapter6.complete.crud",
        "peekOfCode": "def get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter6.complete.crud",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "chapter6.complete.database",
        "description": "chapter6.complete.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"sqlite:///./fantasy_data.db\"\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter6.complete.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "chapter6.complete.database",
        "description": "chapter6.complete.database",
        "peekOfCode": "engine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter6.complete.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "chapter6.complete.database",
        "description": "chapter6.complete.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter6.complete.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "chapter6.complete.database",
        "description": "chapter6.complete.database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "chapter6.complete.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "chapter6.complete.main",
        "description": "chapter6.complete.main",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n@app.get(\n    \"/\",\n    summary=\"Check to see if the SWC fantasy football API is running\",\n    description=\"\"\"Use this endpoint to check if the API is running. You can also check it first before making other calls to be sure it's running.\"\"\",",
        "detail": "chapter6.complete.main",
        "documentation": {}
    },
    {
        "label": "read_players",
        "kind": 2,
        "importPath": "chapter6.complete.main",
        "description": "chapter6.complete.main",
        "peekOfCode": "def read_players(\n    skip: int = Query(\n        0, description=\"The number of items to skip at the beginning of API call.\"\n    ),\n    limit: int = Query(\n        100, description=\"The number of records to return after the skipped records.\"\n    ),\n    minimum_last_changed_date: date = Query(\n        None,\n        description=\"The minimum data of change that you want to return records. Exclude any records changed before this.\",",
        "detail": "chapter6.complete.main",
        "documentation": {}
    },
    {
        "label": "read_player",
        "kind": 2,
        "importPath": "chapter6.complete.main",
        "description": "chapter6.complete.main",
        "peekOfCode": "def read_player(player_id: int, db: Session = Depends(get_db)):\n    player = crud.get_player(db, player_id=player_id)\n    if player is None:\n        raise HTTPException(status_code=404, detail=\"Player not found\")\n    return player\n@app.get(\n    \"/v0/performances/\",\n    response_model=list[schemas.Performance],\n    summary=\"Get all the weekly performances that meet all the parameters you sent with your request\",\n    description=\"\"\"Use this endpoint to get lists of weekly performances by players in the SWC. You us the skip and limit to perform pagination of the API. Don't use the Performance ID for counting or logic, because that is an internal ID and is not guaranteed to be sequential\"\"\",",
        "detail": "chapter6.complete.main",
        "documentation": {}
    },
    {
        "label": "read_performances",
        "kind": 2,
        "importPath": "chapter6.complete.main",
        "description": "chapter6.complete.main",
        "peekOfCode": "def read_performances(\n    skip: int = Query(\n        0, description=\"The number of items to skip at the beginning of API call.\"\n    ),\n    limit: int = Query(\n        100, description=\"The number of records to return after the skipped records.\"\n    ),\n    minimum_last_changed_date: date = Query(\n        None,\n        description=\"The minimum data of change that you want to return records. Exclude any records changed before this.\",",
        "detail": "chapter6.complete.main",
        "documentation": {}
    },
    {
        "label": "read_league",
        "kind": 2,
        "importPath": "chapter6.complete.main",
        "description": "chapter6.complete.main",
        "peekOfCode": "def read_league(league_id: int, db: Session = Depends(get_db)):\n    league = crud.get_league(db, league_id=league_id)\n    if league is None:\n        raise HTTPException(status_code=404, detail=\"League not found\")\n    return league\n@app.get(\n    \"/v0/leagues/\",\n    response_model=list[schemas.League],\n    summary=\"Get all the SWC fantasy football leagues that match the parameters you send\",\n    description=\"\"\"Use this endpoint to get lists of SWC fantasy football leagues. You us the skip and limit to perform pagination of the API. League name is not guaranteed to be unique. Don't use the League ID for counting or logic, because that is an internal ID and is not guaranteed to be sequential\"\"\",",
        "detail": "chapter6.complete.main",
        "documentation": {}
    },
    {
        "label": "read_leagues",
        "kind": 2,
        "importPath": "chapter6.complete.main",
        "description": "chapter6.complete.main",
        "peekOfCode": "def read_leagues(\n    skip: int = Query(\n        0, description=\"The number of items to skip at the beginning of API call.\"\n    ),\n    limit: int = Query(\n        100, description=\"The number of records to return after the skipped records.\"\n    ),\n    minimum_last_changed_date: date = Query(\n        None,\n        description=\"The minimum data of change that you want to return records. Exclude any records changed before this.\",",
        "detail": "chapter6.complete.main",
        "documentation": {}
    },
    {
        "label": "read_teams",
        "kind": 2,
        "importPath": "chapter6.complete.main",
        "description": "chapter6.complete.main",
        "peekOfCode": "def read_teams(\n    skip: int = Query(\n        0, description=\"The number of items to skip at the beginning of API call.\"\n    ),\n    limit: int = Query(\n        100, description=\"The number of records to return after the skipped records.\"\n    ),\n    minimum_last_changed_date: date = Query(\n        None,\n        description=\"The minimum data of change that you want to return records. Exclude any records changed before this.\",",
        "detail": "chapter6.complete.main",
        "documentation": {}
    },
    {
        "label": "get_count",
        "kind": 2,
        "importPath": "chapter6.complete.main",
        "description": "chapter6.complete.main",
        "peekOfCode": "def get_count(db: Session = Depends(get_db)):\n    counts = schemas.Counts(\n        league_count=crud.get_league_count(db),\n        team_count=crud.get_team_count(db),\n        player_count=crud.get_player_count(db),\n    )\n    return counts",
        "detail": "chapter6.complete.main",
        "documentation": {}
    },
    {
        "label": "api_description",
        "kind": 5,
        "importPath": "chapter6.complete.main",
        "description": "chapter6.complete.main",
        "peekOfCode": "api_description = \"\"\"\nThis API provides read-only access to info from the Sports World Central (SWC) Fantasy Football API. \nThe endpoints are grouped into the following categories:\n## Analytics\nGet information about health of the API and counts of leagues, teams, and players.\n## Player\nYou can get a list of an NFL players, or search for an individual player by player_id.\n## Scoring\nYou can get a list of NFL player performances, including the fantasy points they scored using SWC league scoring.\n## Membership",
        "detail": "chapter6.complete.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "chapter6.complete.main",
        "description": "chapter6.complete.main",
        "peekOfCode": "app = FastAPI(\n    description=api_description,\n    title=\"Sports World Central (SWC) Fantasy Football API\",\n    version=\"0.1\",\n)\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "chapter6.complete.main",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "chapter6.complete.models",
        "description": "chapter6.complete.models",
        "peekOfCode": "class Player(Base):\n    __tablename__ = \"player\"\n    player_id = Column(Integer, primary_key=True, index=True)\n    gsis_id = Column(String, nullable=True)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    position = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    performances = relationship(\"Performance\", back_populates=\"player\")\n    # Many-to-many relationship between Player and Team tables",
        "detail": "chapter6.complete.models",
        "documentation": {}
    },
    {
        "label": "Performance",
        "kind": 6,
        "importPath": "chapter6.complete.models",
        "description": "chapter6.complete.models",
        "peekOfCode": "class Performance(Base):\n    __tablename__ = \"performance\"\n    performance_id = Column(Integer, primary_key=True, index=True)\n    week_number = Column(String, nullable=False)\n    fantasy_points = Column(Float, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    player_id = Column(Integer, ForeignKey(\"player.player_id\"))\n    player = relationship(\"Player\", back_populates=\"performances\")\nclass League(Base):\n    __tablename__ = \"league\"",
        "detail": "chapter6.complete.models",
        "documentation": {}
    },
    {
        "label": "League",
        "kind": 6,
        "importPath": "chapter6.complete.models",
        "description": "chapter6.complete.models",
        "peekOfCode": "class League(Base):\n    __tablename__ = \"league\"\n    league_id = Column(Integer, primary_key=True, index=True)\n    league_name = Column(String, nullable=False)\n    scoring_type = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    teams = relationship(\"Team\", back_populates=\"league\")\nclass Team(Base):\n    __tablename__ = \"team\"\n    team_id = Column(Integer, primary_key=True, index=True)",
        "detail": "chapter6.complete.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "chapter6.complete.models",
        "description": "chapter6.complete.models",
        "peekOfCode": "class Team(Base):\n    __tablename__ = \"team\"\n    team_id = Column(Integer, primary_key=True, index=True)\n    team_name = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)    \n    league_id = Column(Integer, ForeignKey(\"league.league_id\"))\n    league = relationship(\"League\", back_populates=\"teams\")\n    players = relationship(\"Player\", secondary=\"team_player\", \n                           back_populates=\"teams\")\nclass TeamPlayer(Base):",
        "detail": "chapter6.complete.models",
        "documentation": {}
    },
    {
        "label": "TeamPlayer",
        "kind": 6,
        "importPath": "chapter6.complete.models",
        "description": "chapter6.complete.models",
        "peekOfCode": "class TeamPlayer(Base):\n    __tablename__ = \"team_player\"\n    team_id = Column(Integer, ForeignKey(\"team.team_id\"), \n                     primary_key=True, index=True)\n    player_id = Column(Integer, ForeignKey(\"player.player_id\"), \n                       primary_key=True, index=True)\n    last_changed_date = Column(Date, nullable=False)",
        "detail": "chapter6.complete.models",
        "documentation": {}
    },
    {
        "label": "Performance",
        "kind": 6,
        "importPath": "chapter6.complete.schemas",
        "description": "chapter6.complete.schemas",
        "peekOfCode": "class Performance(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    performance_id : int\n    player_id : int\n    week_number : str\n    fantasy_points : float\n    last_changed_date : date\nclass PlayerBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)    \n    player_id : int",
        "detail": "chapter6.complete.schemas",
        "documentation": {}
    },
    {
        "label": "PlayerBase",
        "kind": 6,
        "importPath": "chapter6.complete.schemas",
        "description": "chapter6.complete.schemas",
        "peekOfCode": "class PlayerBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)    \n    player_id : int\n    gsis_id: str\n    first_name : str\n    last_name : str\n    position : str\n    last_changed_date : date\nclass Player(PlayerBase):\n    model_config = ConfigDict(from_attributes = True)",
        "detail": "chapter6.complete.schemas",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "chapter6.complete.schemas",
        "description": "chapter6.complete.schemas",
        "peekOfCode": "class Player(PlayerBase):\n    model_config = ConfigDict(from_attributes = True)\n    performances: List[Performance] = []\nclass TeamBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    team_id : int\n    team_name : str\n    last_changed_date : date\nclass Team(TeamBase):",
        "detail": "chapter6.complete.schemas",
        "documentation": {}
    },
    {
        "label": "TeamBase",
        "kind": 6,
        "importPath": "chapter6.complete.schemas",
        "description": "chapter6.complete.schemas",
        "peekOfCode": "class TeamBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    team_id : int\n    team_name : str\n    last_changed_date : date\nclass Team(TeamBase):\n    model_config = ConfigDict(from_attributes = True)\n    players: List[PlayerBase] = []\nclass League(BaseModel):",
        "detail": "chapter6.complete.schemas",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "chapter6.complete.schemas",
        "description": "chapter6.complete.schemas",
        "peekOfCode": "class Team(TeamBase):\n    model_config = ConfigDict(from_attributes = True)\n    players: List[PlayerBase] = []\nclass League(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    league_name : str\n    scoring_type : str\n    last_changed_date : date\n    teams: List[TeamBase] = []",
        "detail": "chapter6.complete.schemas",
        "documentation": {}
    },
    {
        "label": "League",
        "kind": 6,
        "importPath": "chapter6.complete.schemas",
        "description": "chapter6.complete.schemas",
        "peekOfCode": "class League(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    league_name : str\n    scoring_type : str\n    last_changed_date : date\n    teams: List[TeamBase] = []\nclass Counts(BaseModel):\n    league_count : int\n    team_count : int",
        "detail": "chapter6.complete.schemas",
        "documentation": {}
    },
    {
        "label": "Counts",
        "kind": 6,
        "importPath": "chapter6.complete.schemas",
        "description": "chapter6.complete.schemas",
        "peekOfCode": "class Counts(BaseModel):\n    league_count : int\n    team_count : int\n    player_count : int",
        "detail": "chapter6.complete.schemas",
        "documentation": {}
    },
    {
        "label": "db_session",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def db_session():\n    \"\"\"This starts a database session and closes it when done\"\"\"\n    session = SessionLocal()\n    yield session\n    session.close()\ndef test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id = 1001)\n    assert player.player_id == 1001\ndef test_get_players(db_session):",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_player",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id = 1001)\n    assert player.player_id == 1001\ndef test_get_players(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, skip=0, limit=10000,\n                                min_last_changed_date=test_date)\n    assert len(players) == 1018\ndef test_get_players_by_name(db_session):",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_players",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_players(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, skip=0, limit=10000,\n                                min_last_changed_date=test_date)\n    assert len(players) == 1018\ndef test_get_players_by_name(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, first_name=\"Bryce\", last_name=\"Young\")\n    assert len(players) == 1\n    assert players[0].player_id == 2009",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_players_by_name",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_players_by_name(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, first_name=\"Bryce\", last_name=\"Young\")\n    assert len(players) == 1\n    assert players[0].player_id == 2009\ndef test_get_all_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected - all the performances\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=18000)\n    assert len(performances) == 17306",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_all_performances",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_all_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected - all the performances\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=18000)\n    assert len(performances) == 17306\ndef test_get_new_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=10000, \n                                         min_last_changed_date=test_date)",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_new_performances",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_new_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=10000, \n                                         min_last_changed_date=test_date)\n    assert len(performances) == 2711\ndef test_get_league(db_session):\n    \"\"\"Tests you can get a league\"\"\"\n    league = crud.get_league(db_session, league_id = 5002)\n    assert league.league_id == 5002",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_league",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_league(db_session):\n    \"\"\"Tests you can get a league\"\"\"\n    league = crud.get_league(db_session, league_id = 5002)\n    assert league.league_id == 5002\n    assert len(league.teams) == 8\ndef test_get_leagues(db_session):\n    \"\"\"Tests that the count of leagues in the database is what is expected\"\"\"\n    leagues = crud.get_leagues(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(leagues) == 5\ndef test_get_teams(db_session):",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_leagues",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_leagues(db_session):\n    \"\"\"Tests that the count of leagues in the database is what is expected\"\"\"\n    leagues = crud.get_leagues(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(leagues) == 5\ndef test_get_teams(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(teams) == 20\ndef test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_teams",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_teams(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(teams) == 20\ndef test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, league_id=5001)\n    assert len(teams) == 12\n    assert teams[0].league_id == 5001\ndef test_get_team_players(db_session):",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_teams_for_one_league",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, league_id=5001)\n    assert len(teams) == 12\n    assert teams[0].league_id == 5001\ndef test_get_team_players(db_session):\n    \"\"\"Tests that a team record can retrieve players, and that 8 players are on the first team\"\"\"\n    first_team = crud.get_teams(db_session, skip=0, limit=1000, min_last_changed_date=test_date)[0]\n    assert len(first_team.players) == 7\n#test the count functions",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_team_players",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_team_players(db_session):\n    \"\"\"Tests that a team record can retrieve players, and that 8 players are on the first team\"\"\"\n    first_team = crud.get_teams(db_session, skip=0, limit=1000, min_last_changed_date=test_date)[0]\n    assert len(first_team.players) == 7\n#test the count functions\ndef test_get_player_count(db_session):\n    player_count = crud.get_player_count(db_session)\n    assert player_count == 1018\ndef test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_player_count",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_player_count(db_session):\n    player_count = crud.get_player_count(db_session)\n    assert player_count == 1018\ndef test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)\n    assert team_count == 20\ndef test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_team_count",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)\n    assert team_count == 20\ndef test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_league_count",
        "kind": 2,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "def test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_date",
        "kind": 5,
        "importPath": "chapter6.complete.test_crud",
        "description": "chapter6.complete.test_crud",
        "peekOfCode": "test_date = date(2024,4,1)\n@pytest.fixture(scope=\"function\")\ndef db_session():\n    \"\"\"This starts a database session and closes it when done\"\"\"\n    session = SessionLocal()\n    yield session\n    session.close()\ndef test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id = 1001)",
        "detail": "chapter6.complete.test_crud",
        "documentation": {}
    },
    {
        "label": "test_read_main",
        "kind": 2,
        "importPath": "chapter6.complete.test_main",
        "description": "chapter6.complete.test_main",
        "peekOfCode": "def test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"API health check successful\"}\n# test /v0/players/\ndef test_read_players():\n    response = client.get(\"/v0/players/?skip=0&limit=10000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1018\ndef test_read_players_by_name():",
        "detail": "chapter6.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_players",
        "kind": 2,
        "importPath": "chapter6.complete.test_main",
        "description": "chapter6.complete.test_main",
        "peekOfCode": "def test_read_players():\n    response = client.get(\"/v0/players/?skip=0&limit=10000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1018\ndef test_read_players_by_name():\n    response = client.get(\"/v0/players/?first_name=Bryce&last_name=Young\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1\n    assert response.json()[0].get(\"player_id\") == 2009\n# test /v0/players/{player_id}/",
        "detail": "chapter6.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_players_by_name",
        "kind": 2,
        "importPath": "chapter6.complete.test_main",
        "description": "chapter6.complete.test_main",
        "peekOfCode": "def test_read_players_by_name():\n    response = client.get(\"/v0/players/?first_name=Bryce&last_name=Young\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1\n    assert response.json()[0].get(\"player_id\") == 2009\n# test /v0/players/{player_id}/\ndef test_read_players_with_id():\n    response = client.get(\"/v0/players/1001/\")\n    assert response.status_code == 200\n    assert response.json().get(\"player_id\") == 1001",
        "detail": "chapter6.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_players_with_id",
        "kind": 2,
        "importPath": "chapter6.complete.test_main",
        "description": "chapter6.complete.test_main",
        "peekOfCode": "def test_read_players_with_id():\n    response = client.get(\"/v0/players/1001/\")\n    assert response.status_code == 200\n    assert response.json().get(\"player_id\") == 1001\n# test /v0/performances/\ndef test_read_performances():\n    response = client.get(\"/v0/performances/?skip=0&limit=20000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 17306\n# test /v0/performances/ with changed date",
        "detail": "chapter6.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_performances",
        "kind": 2,
        "importPath": "chapter6.complete.test_main",
        "description": "chapter6.complete.test_main",
        "peekOfCode": "def test_read_performances():\n    response = client.get(\"/v0/performances/?skip=0&limit=20000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 17306\n# test /v0/performances/ with changed date\ndef test_read_performances_by_date():\n    response = client.get(\n        \"/v0/performances/?skip=0&limit=20000&minimum_last_changed_date=2024-04-01\"\n    )\n    assert response.status_code == 200",
        "detail": "chapter6.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_performances_by_date",
        "kind": 2,
        "importPath": "chapter6.complete.test_main",
        "description": "chapter6.complete.test_main",
        "peekOfCode": "def test_read_performances_by_date():\n    response = client.get(\n        \"/v0/performances/?skip=0&limit=20000&minimum_last_changed_date=2024-04-01\"\n    )\n    assert response.status_code == 200\n    assert len(response.json()) == 2711\n# test /v0/leagues/{league_id}/\ndef test_read_leagues_with_id():\n    response = client.get(\"/v0/leagues/5002/\")\n    assert response.status_code == 200",
        "detail": "chapter6.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_leagues_with_id",
        "kind": 2,
        "importPath": "chapter6.complete.test_main",
        "description": "chapter6.complete.test_main",
        "peekOfCode": "def test_read_leagues_with_id():\n    response = client.get(\"/v0/leagues/5002/\")\n    assert response.status_code == 200\n    assert len(response.json()[\"teams\"]) == 8\n# test /v0/leagues/\ndef test_read_leagues():\n    response = client.get(\"/v0/leagues/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 5\n# test /v0/teams/",
        "detail": "chapter6.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_leagues",
        "kind": 2,
        "importPath": "chapter6.complete.test_main",
        "description": "chapter6.complete.test_main",
        "peekOfCode": "def test_read_leagues():\n    response = client.get(\"/v0/leagues/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 5\n# test /v0/teams/\ndef test_read_teams():\n    response = client.get(\"/v0/teams/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 20\n# test /v0/teams/",
        "detail": "chapter6.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_teams",
        "kind": 2,
        "importPath": "chapter6.complete.test_main",
        "description": "chapter6.complete.test_main",
        "peekOfCode": "def test_read_teams():\n    response = client.get(\"/v0/teams/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 20\n# test /v0/teams/\ndef test_read_teams_for_one_league():\n    response = client.get(\"/v0/teams/?skip=0&limit=500&league_id=5001\")\n    assert response.status_code == 200\n    assert len(response.json()) == 12\n# test the count functions",
        "detail": "chapter6.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_teams_for_one_league",
        "kind": 2,
        "importPath": "chapter6.complete.test_main",
        "description": "chapter6.complete.test_main",
        "peekOfCode": "def test_read_teams_for_one_league():\n    response = client.get(\"/v0/teams/?skip=0&limit=500&league_id=5001\")\n    assert response.status_code == 200\n    assert len(response.json()) == 12\n# test the count functions\ndef test_counts():\n    response = client.get(\"/v0/counts/\")\n    response_data = response.json()\n    assert response.status_code == 200\n    assert response_data[\"league_count\"] == 5",
        "detail": "chapter6.complete.test_main",
        "documentation": {}
    },
    {
        "label": "test_counts",
        "kind": 2,
        "importPath": "chapter6.complete.test_main",
        "description": "chapter6.complete.test_main",
        "peekOfCode": "def test_counts():\n    response = client.get(\"/v0/counts/\")\n    response_data = response.json()\n    assert response.status_code == 200\n    assert response_data[\"league_count\"] == 5\n    assert response_data[\"team_count\"] == 20\n    assert response_data[\"player_count\"] == 1018",
        "detail": "chapter6.complete.test_main",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "chapter6.complete.test_main",
        "description": "chapter6.complete.test_main",
        "peekOfCode": "client = TestClient(app)\n# test the health check endpoint\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"API health check successful\"}\n# test /v0/players/\ndef test_read_players():\n    response = client.get(\"/v0/players/?skip=0&limit=10000\")\n    assert response.status_code == 200",
        "detail": "chapter6.complete.test_main",
        "documentation": {}
    },
    {
        "label": "get_player",
        "kind": 2,
        "importPath": "chapter6.crud",
        "description": "chapter6.crud",
        "peekOfCode": "def get_player(db: Session, player_id: int):\n    return db.query(models.Player).filter(\n        models.Player.player_id == player_id).first()\ndef get_players(db: Session, skip: int = 0, limit: int = 100, \n                min_last_changed_date: date = None, \n                last_name : str = None, first_name : str = None, ):\n    query = db.query(models.Player)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Player.last_changed_date >= min_last_changed_date)",
        "detail": "chapter6.crud",
        "documentation": {}
    },
    {
        "label": "get_players",
        "kind": 2,
        "importPath": "chapter6.crud",
        "description": "chapter6.crud",
        "peekOfCode": "def get_players(db: Session, skip: int = 0, limit: int = 100, \n                min_last_changed_date: date = None, \n                last_name : str = None, first_name : str = None, ):\n    query = db.query(models.Player)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Player.last_changed_date >= min_last_changed_date)\n    if first_name:\n        query = query.filter(models.Player.first_name == first_name)\n    if last_name:",
        "detail": "chapter6.crud",
        "documentation": {}
    },
    {
        "label": "get_performances",
        "kind": 2,
        "importPath": "chapter6.crud",
        "description": "chapter6.crud",
        "peekOfCode": "def get_performances(db: Session, skip: int = 0, limit: int = 100, \n                     min_last_changed_date: date = None):\n    query = db.query(models.Performance)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Performance.last_changed_date >= min_last_changed_date)\n    return query.offset(skip).limit(limit).all()\ndef get_league(db: Session, league_id: int = None):\n    return db.query(models.League).filter(\n        models.League.league_id == league_id).first()",
        "detail": "chapter6.crud",
        "documentation": {}
    },
    {
        "label": "get_league",
        "kind": 2,
        "importPath": "chapter6.crud",
        "description": "chapter6.crud",
        "peekOfCode": "def get_league(db: Session, league_id: int = None):\n    return db.query(models.League).filter(\n        models.League.league_id == league_id).first()\ndef get_leagues(db: Session, skip: int = 0, limit: int = 100,\n                 min_last_changed_date: date = None,league_name: str = None):\n    query = db.query(models.League\n                    ).options(joinedload(models.League.teams))\n    if min_last_changed_date:\n        query = query.filter(\n            models.League.last_changed_date >= min_last_changed_date)                              ",
        "detail": "chapter6.crud",
        "documentation": {}
    },
    {
        "label": "get_leagues",
        "kind": 2,
        "importPath": "chapter6.crud",
        "description": "chapter6.crud",
        "peekOfCode": "def get_leagues(db: Session, skip: int = 0, limit: int = 100,\n                 min_last_changed_date: date = None,league_name: str = None):\n    query = db.query(models.League\n                    ).options(joinedload(models.League.teams))\n    if min_last_changed_date:\n        query = query.filter(\n            models.League.last_changed_date >= min_last_changed_date)                              \n    if league_name: \n        query = query.filter(models.League.league_name == league_name)     \n    return query.offset(skip).limit(limit).all()",
        "detail": "chapter6.crud",
        "documentation": {}
    },
    {
        "label": "get_teams",
        "kind": 2,
        "importPath": "chapter6.crud",
        "description": "chapter6.crud",
        "peekOfCode": "def get_teams(db: Session, skip: int = 0, limit: int = 100, \n              min_last_changed_date: date = None, \n              team_name: str = None, league_id: int = None):\n    query = db.query(models.Team)\n    if min_last_changed_date:\n        query = query.filter(\n            models.Team.last_changed_date >= min_last_changed_date)\n    if team_name: \n        query = query.filter(models.Team.team_name == team_name)\n    if league_id: ",
        "detail": "chapter6.crud",
        "documentation": {}
    },
    {
        "label": "get_player_count",
        "kind": 2,
        "importPath": "chapter6.crud",
        "description": "chapter6.crud",
        "peekOfCode": "def get_player_count(db: Session):\n    query = db.query(models.Player)\n    return query.count()\ndef get_team_count(db: Session):\n    query = db.query(models.Team)\n    return query.count()\ndef get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter6.crud",
        "documentation": {}
    },
    {
        "label": "get_team_count",
        "kind": 2,
        "importPath": "chapter6.crud",
        "description": "chapter6.crud",
        "peekOfCode": "def get_team_count(db: Session):\n    query = db.query(models.Team)\n    return query.count()\ndef get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter6.crud",
        "documentation": {}
    },
    {
        "label": "get_league_count",
        "kind": 2,
        "importPath": "chapter6.crud",
        "description": "chapter6.crud",
        "peekOfCode": "def get_league_count(db: Session):\n    query = db.query(models.League)\n    return query.count()",
        "detail": "chapter6.crud",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "chapter6.database",
        "description": "chapter6.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"sqlite:///./fantasy_data.db\"\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter6.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "chapter6.database",
        "description": "chapter6.database",
        "peekOfCode": "engine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter6.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "chapter6.database",
        "description": "chapter6.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "chapter6.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "chapter6.database",
        "description": "chapter6.database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "chapter6.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "chapter6.main",
        "description": "chapter6.main",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n@app.get(\n    \"/\",\n    summary=\"Check to see if the SWC fantasy football API is running\",\n    description=\"\"\"Use this endpoint to check if the API is running. You can also check it first before making other calls to be sure it's running.\"\"\",",
        "detail": "chapter6.main",
        "documentation": {}
    },
    {
        "label": "read_players",
        "kind": 2,
        "importPath": "chapter6.main",
        "description": "chapter6.main",
        "peekOfCode": "def read_players(\n    skip: int = Query(\n        0, description=\"The number of items to skip at the beginning of API call.\"\n    ),\n    limit: int = Query(\n        100, description=\"The number of records to return after the skipped records.\"\n    ),\n    minimum_last_changed_date: date = Query(\n        None,\n        description=\"The minimum data of change that you want to return records. Exclude any records changed before this.\",",
        "detail": "chapter6.main",
        "documentation": {}
    },
    {
        "label": "read_player",
        "kind": 2,
        "importPath": "chapter6.main",
        "description": "chapter6.main",
        "peekOfCode": "def read_player(player_id: int, db: Session = Depends(get_db)):\n    player = crud.get_player(db, player_id=player_id)\n    if player is None:\n        raise HTTPException(status_code=404, detail=\"Player not found\")\n    return player\n@app.get(\n    \"/v0/performances/\",\n    response_model=list[schemas.Performance],\n    summary=\"Get all the weekly performances that meet all the parameters you sent with your request\",\n    description=\"\"\"Use this endpoint to get lists of weekly performances by players in the SWC. You us the skip and limit to perform pagination of the API. Don't use the Performance ID for counting or logic, because that is an internal ID and is not guaranteed to be sequential\"\"\",",
        "detail": "chapter6.main",
        "documentation": {}
    },
    {
        "label": "read_performances",
        "kind": 2,
        "importPath": "chapter6.main",
        "description": "chapter6.main",
        "peekOfCode": "def read_performances(\n    skip: int = Query(\n        0, description=\"The number of items to skip at the beginning of API call.\"\n    ),\n    limit: int = Query(\n        100, description=\"The number of records to return after the skipped records.\"\n    ),\n    minimum_last_changed_date: date = Query(\n        None,\n        description=\"The minimum data of change that you want to return records. Exclude any records changed before this.\",",
        "detail": "chapter6.main",
        "documentation": {}
    },
    {
        "label": "read_league",
        "kind": 2,
        "importPath": "chapter6.main",
        "description": "chapter6.main",
        "peekOfCode": "def read_league(league_id: int, db: Session = Depends(get_db)):\n    league = crud.get_league(db, league_id=league_id)\n    if league is None:\n        raise HTTPException(status_code=404, detail=\"League not found\")\n    return league\n@app.get(\n    \"/v0/leagues/\",\n    response_model=list[schemas.League],\n    summary=\"Get all the SWC fantasy football leagues that match the parameters you send\",\n    description=\"\"\"Use this endpoint to get lists of SWC fantasy football leagues. You us the skip and limit to perform pagination of the API. League name is not guaranteed to be unique. Don't use the League ID for counting or logic, because that is an internal ID and is not guaranteed to be sequential\"\"\",",
        "detail": "chapter6.main",
        "documentation": {}
    },
    {
        "label": "read_leagues",
        "kind": 2,
        "importPath": "chapter6.main",
        "description": "chapter6.main",
        "peekOfCode": "def read_leagues(\n    skip: int = Query(\n        0, description=\"The number of items to skip at the beginning of API call.\"\n    ),\n    limit: int = Query(\n        100, description=\"The number of records to return after the skipped records.\"\n    ),\n    minimum_last_changed_date: date = Query(\n        None,\n        description=\"The minimum data of change that you want to return records. Exclude any records changed before this.\",",
        "detail": "chapter6.main",
        "documentation": {}
    },
    {
        "label": "read_teams",
        "kind": 2,
        "importPath": "chapter6.main",
        "description": "chapter6.main",
        "peekOfCode": "def read_teams(\n    skip: int = Query(\n        0, description=\"The number of items to skip at the beginning of API call.\"\n    ),\n    limit: int = Query(\n        100, description=\"The number of records to return after the skipped records.\"\n    ),\n    minimum_last_changed_date: date = Query(\n        None,\n        description=\"The minimum data of change that you want to return records. Exclude any records changed before this.\",",
        "detail": "chapter6.main",
        "documentation": {}
    },
    {
        "label": "get_count",
        "kind": 2,
        "importPath": "chapter6.main",
        "description": "chapter6.main",
        "peekOfCode": "def get_count(db: Session = Depends(get_db)):\n    counts = schemas.Counts(\n        league_count=crud.get_league_count(db),\n        team_count=crud.get_team_count(db),\n        player_count=crud.get_player_count(db),\n    )\n    return counts",
        "detail": "chapter6.main",
        "documentation": {}
    },
    {
        "label": "api_description",
        "kind": 5,
        "importPath": "chapter6.main",
        "description": "chapter6.main",
        "peekOfCode": "api_description = \"\"\"\nThis API provides read-only access to info from the Sports World Central (SWC) Fantasy Football API. \nThe endpoints are grouped into the following categories:\n## Analytics\nGet information about health of the API and counts of leagues, teams, and players.\n## Player\nYou can get a list of an NFL players, or search for an individual player by player_id.\n## Scoring\nYou can get a list of NFL player performances, including the fantasy points they scored using SWC league scoring.\n## Membership",
        "detail": "chapter6.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "chapter6.main",
        "description": "chapter6.main",
        "peekOfCode": "app = FastAPI(\n    description=api_description,\n    title=\"Sports World Central (SWC) Fantasy Football API\",\n    version=\"0.1\",\n)\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "chapter6.main",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "chapter6.models",
        "description": "chapter6.models",
        "peekOfCode": "class Player(Base):\n    __tablename__ = \"player\"\n    player_id = Column(Integer, primary_key=True, index=True)\n    gsis_id = Column(String, nullable=True)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    position = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    performances = relationship(\"Performance\", back_populates=\"player\")\n    # Many-to-many relationship between Player and Team tables",
        "detail": "chapter6.models",
        "documentation": {}
    },
    {
        "label": "Performance",
        "kind": 6,
        "importPath": "chapter6.models",
        "description": "chapter6.models",
        "peekOfCode": "class Performance(Base):\n    __tablename__ = \"performance\"\n    performance_id = Column(Integer, primary_key=True, index=True)\n    week_number = Column(String, nullable=False)\n    fantasy_points = Column(Float, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    player_id = Column(Integer, ForeignKey(\"player.player_id\"))\n    player = relationship(\"Player\", back_populates=\"performances\")\nclass League(Base):\n    __tablename__ = \"league\"",
        "detail": "chapter6.models",
        "documentation": {}
    },
    {
        "label": "League",
        "kind": 6,
        "importPath": "chapter6.models",
        "description": "chapter6.models",
        "peekOfCode": "class League(Base):\n    __tablename__ = \"league\"\n    league_id = Column(Integer, primary_key=True, index=True)\n    league_name = Column(String, nullable=False)\n    scoring_type = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)\n    teams = relationship(\"Team\", back_populates=\"league\")\nclass Team(Base):\n    __tablename__ = \"team\"\n    team_id = Column(Integer, primary_key=True, index=True)",
        "detail": "chapter6.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "chapter6.models",
        "description": "chapter6.models",
        "peekOfCode": "class Team(Base):\n    __tablename__ = \"team\"\n    team_id = Column(Integer, primary_key=True, index=True)\n    team_name = Column(String, nullable=False)\n    last_changed_date = Column(Date, nullable=False)    \n    league_id = Column(Integer, ForeignKey(\"league.league_id\"))\n    league = relationship(\"League\", back_populates=\"teams\")\n    players = relationship(\"Player\", secondary=\"team_player\", \n                           back_populates=\"teams\")\nclass TeamPlayer(Base):",
        "detail": "chapter6.models",
        "documentation": {}
    },
    {
        "label": "TeamPlayer",
        "kind": 6,
        "importPath": "chapter6.models",
        "description": "chapter6.models",
        "peekOfCode": "class TeamPlayer(Base):\n    __tablename__ = \"team_player\"\n    team_id = Column(Integer, ForeignKey(\"team.team_id\"), \n                     primary_key=True, index=True)\n    player_id = Column(Integer, ForeignKey(\"player.player_id\"), \n                       primary_key=True, index=True)\n    last_changed_date = Column(Date, nullable=False)",
        "detail": "chapter6.models",
        "documentation": {}
    },
    {
        "label": "Performance",
        "kind": 6,
        "importPath": "chapter6.schemas",
        "description": "chapter6.schemas",
        "peekOfCode": "class Performance(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    performance_id : int\n    player_id : int\n    week_number : str\n    fantasy_points : float\n    last_changed_date : date\nclass PlayerBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)    \n    player_id : int",
        "detail": "chapter6.schemas",
        "documentation": {}
    },
    {
        "label": "PlayerBase",
        "kind": 6,
        "importPath": "chapter6.schemas",
        "description": "chapter6.schemas",
        "peekOfCode": "class PlayerBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)    \n    player_id : int\n    gsis_id: str\n    first_name : str\n    last_name : str\n    position : str\n    last_changed_date : date\nclass Player(PlayerBase):\n    model_config = ConfigDict(from_attributes = True)",
        "detail": "chapter6.schemas",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "chapter6.schemas",
        "description": "chapter6.schemas",
        "peekOfCode": "class Player(PlayerBase):\n    model_config = ConfigDict(from_attributes = True)\n    performances: List[Performance] = []\nclass TeamBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    team_id : int\n    team_name : str\n    last_changed_date : date\nclass Team(TeamBase):",
        "detail": "chapter6.schemas",
        "documentation": {}
    },
    {
        "label": "TeamBase",
        "kind": 6,
        "importPath": "chapter6.schemas",
        "description": "chapter6.schemas",
        "peekOfCode": "class TeamBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    team_id : int\n    team_name : str\n    last_changed_date : date\nclass Team(TeamBase):\n    model_config = ConfigDict(from_attributes = True)\n    players: List[PlayerBase] = []\nclass League(BaseModel):",
        "detail": "chapter6.schemas",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "chapter6.schemas",
        "description": "chapter6.schemas",
        "peekOfCode": "class Team(TeamBase):\n    model_config = ConfigDict(from_attributes = True)\n    players: List[PlayerBase] = []\nclass League(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    league_name : str\n    scoring_type : str\n    last_changed_date : date\n    teams: List[TeamBase] = []",
        "detail": "chapter6.schemas",
        "documentation": {}
    },
    {
        "label": "League",
        "kind": 6,
        "importPath": "chapter6.schemas",
        "description": "chapter6.schemas",
        "peekOfCode": "class League(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    league_name : str\n    scoring_type : str\n    last_changed_date : date\n    teams: List[TeamBase] = []\nclass Counts(BaseModel):\n    league_count : int\n    team_count : int",
        "detail": "chapter6.schemas",
        "documentation": {}
    },
    {
        "label": "Counts",
        "kind": 6,
        "importPath": "chapter6.schemas",
        "description": "chapter6.schemas",
        "peekOfCode": "class Counts(BaseModel):\n    league_count : int\n    team_count : int\n    player_count : int",
        "detail": "chapter6.schemas",
        "documentation": {}
    },
    {
        "label": "db_session",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def db_session():\n    \"\"\"This starts a database session and closes it when done\"\"\"\n    session = SessionLocal()\n    yield session\n    session.close()\ndef test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id = 1001)\n    assert player.player_id == 1001\ndef test_get_players(db_session):",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_player",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id = 1001)\n    assert player.player_id == 1001\ndef test_get_players(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, skip=0, limit=10000,\n                                min_last_changed_date=test_date)\n    assert len(players) == 1018\ndef test_get_players_by_name(db_session):",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_players",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_players(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, skip=0, limit=10000,\n                                min_last_changed_date=test_date)\n    assert len(players) == 1018\ndef test_get_players_by_name(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, first_name=\"Bryce\", last_name=\"Young\")\n    assert len(players) == 1\n    assert players[0].player_id == 2009",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_players_by_name",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_players_by_name(db_session):\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players = crud.get_players(db_session, first_name=\"Bryce\", last_name=\"Young\")\n    assert len(players) == 1\n    assert players[0].player_id == 2009\ndef test_get_all_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected - all the performances\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=18000)\n    assert len(performances) == 17306",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_all_performances",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_all_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected - all the performances\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=18000)\n    assert len(performances) == 17306\ndef test_get_new_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=10000, \n                                         min_last_changed_date=test_date)",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_new_performances",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_new_performances(db_session):\n    \"\"\"Tests that the count of performances in the database is \n    what is expected\"\"\"\n    performances = crud.get_performances(db_session, skip=0, limit=10000, \n                                         min_last_changed_date=test_date)\n    assert len(performances) == 2711\ndef test_get_league(db_session):\n    \"\"\"Tests you can get a league\"\"\"\n    league = crud.get_league(db_session, league_id = 5002)\n    assert league.league_id == 5002",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_league",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_league(db_session):\n    \"\"\"Tests you can get a league\"\"\"\n    league = crud.get_league(db_session, league_id = 5002)\n    assert league.league_id == 5002\n    assert len(league.teams) == 8\ndef test_get_leagues(db_session):\n    \"\"\"Tests that the count of leagues in the database is what is expected\"\"\"\n    leagues = crud.get_leagues(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(leagues) == 5\ndef test_get_teams(db_session):",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_leagues",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_leagues(db_session):\n    \"\"\"Tests that the count of leagues in the database is what is expected\"\"\"\n    leagues = crud.get_leagues(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(leagues) == 5\ndef test_get_teams(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(teams) == 20\ndef test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_teams",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_teams(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, skip=0, limit=10000, min_last_changed_date=test_date)\n    assert len(teams) == 20\ndef test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, league_id=5001)\n    assert len(teams) == 12\n    assert teams[0].league_id == 5001\ndef test_get_team_players(db_session):",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_teams_for_one_league",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_teams_for_one_league(db_session):\n    \"\"\"Tests that the count of teams in the database is what is expected\"\"\"\n    teams = crud.get_teams(db_session, league_id=5001)\n    assert len(teams) == 12\n    assert teams[0].league_id == 5001\ndef test_get_team_players(db_session):\n    \"\"\"Tests that a team record can retrieve players, and that 8 players are on the first team\"\"\"\n    first_team = crud.get_teams(db_session, skip=0, limit=1000, min_last_changed_date=test_date)[0]\n    assert len(first_team.players) == 7\n#test the count functions",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_team_players",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_team_players(db_session):\n    \"\"\"Tests that a team record can retrieve players, and that 8 players are on the first team\"\"\"\n    first_team = crud.get_teams(db_session, skip=0, limit=1000, min_last_changed_date=test_date)[0]\n    assert len(first_team.players) == 7\n#test the count functions\ndef test_get_player_count(db_session):\n    player_count = crud.get_player_count(db_session)\n    assert player_count == 1018\ndef test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_player_count",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_player_count(db_session):\n    player_count = crud.get_player_count(db_session)\n    assert player_count == 1018\ndef test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)\n    assert team_count == 20\ndef test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_team_count",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_team_count(db_session):\n    team_count = crud.get_team_count(db_session)\n    assert team_count == 20\ndef test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_get_league_count",
        "kind": 2,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "def test_get_league_count(db_session):\n    league_count = crud.get_league_count(db_session)\n    assert league_count == 5",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_date",
        "kind": 5,
        "importPath": "chapter6.test_crud",
        "description": "chapter6.test_crud",
        "peekOfCode": "test_date = date(2024,4,1)\n@pytest.fixture(scope=\"function\")\ndef db_session():\n    \"\"\"This starts a database session and closes it when done\"\"\"\n    session = SessionLocal()\n    yield session\n    session.close()\ndef test_get_player(db_session):\n    \"\"\"Tests you can get the first player\"\"\"\n    player = crud.get_player(db_session, player_id = 1001)",
        "detail": "chapter6.test_crud",
        "documentation": {}
    },
    {
        "label": "test_read_main",
        "kind": 2,
        "importPath": "chapter6.test_main",
        "description": "chapter6.test_main",
        "peekOfCode": "def test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"API health check successful\"}\n# test /v0/players/\ndef test_read_players():\n    response = client.get(\"/v0/players/?skip=0&limit=10000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1018\ndef test_read_players_by_name():",
        "detail": "chapter6.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_players",
        "kind": 2,
        "importPath": "chapter6.test_main",
        "description": "chapter6.test_main",
        "peekOfCode": "def test_read_players():\n    response = client.get(\"/v0/players/?skip=0&limit=10000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1018\ndef test_read_players_by_name():\n    response = client.get(\"/v0/players/?first_name=Bryce&last_name=Young\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1\n    assert response.json()[0].get(\"player_id\") == 2009\n# test /v0/players/{player_id}/",
        "detail": "chapter6.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_players_by_name",
        "kind": 2,
        "importPath": "chapter6.test_main",
        "description": "chapter6.test_main",
        "peekOfCode": "def test_read_players_by_name():\n    response = client.get(\"/v0/players/?first_name=Bryce&last_name=Young\")\n    assert response.status_code == 200\n    assert len(response.json()) == 1\n    assert response.json()[0].get(\"player_id\") == 2009\n# test /v0/players/{player_id}/\ndef test_read_players_with_id():\n    response = client.get(\"/v0/players/1001/\")\n    assert response.status_code == 200\n    assert response.json().get(\"player_id\") == 1001",
        "detail": "chapter6.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_players_with_id",
        "kind": 2,
        "importPath": "chapter6.test_main",
        "description": "chapter6.test_main",
        "peekOfCode": "def test_read_players_with_id():\n    response = client.get(\"/v0/players/1001/\")\n    assert response.status_code == 200\n    assert response.json().get(\"player_id\") == 1001\n# test /v0/performances/\ndef test_read_performances():\n    response = client.get(\"/v0/performances/?skip=0&limit=20000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 17306\n# test /v0/performances/ with changed date",
        "detail": "chapter6.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_performances",
        "kind": 2,
        "importPath": "chapter6.test_main",
        "description": "chapter6.test_main",
        "peekOfCode": "def test_read_performances():\n    response = client.get(\"/v0/performances/?skip=0&limit=20000\")\n    assert response.status_code == 200\n    assert len(response.json()) == 17306\n# test /v0/performances/ with changed date\ndef test_read_performances_by_date():\n    response = client.get(\n        \"/v0/performances/?skip=0&limit=20000&minimum_last_changed_date=2024-04-01\"\n    )\n    assert response.status_code == 200",
        "detail": "chapter6.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_performances_by_date",
        "kind": 2,
        "importPath": "chapter6.test_main",
        "description": "chapter6.test_main",
        "peekOfCode": "def test_read_performances_by_date():\n    response = client.get(\n        \"/v0/performances/?skip=0&limit=20000&minimum_last_changed_date=2024-04-01\"\n    )\n    assert response.status_code == 200\n    assert len(response.json()) == 2711\n# test /v0/leagues/{league_id}/\ndef test_read_leagues_with_id():\n    response = client.get(\"/v0/leagues/5002/\")\n    assert response.status_code == 200",
        "detail": "chapter6.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_leagues_with_id",
        "kind": 2,
        "importPath": "chapter6.test_main",
        "description": "chapter6.test_main",
        "peekOfCode": "def test_read_leagues_with_id():\n    response = client.get(\"/v0/leagues/5002/\")\n    assert response.status_code == 200\n    assert len(response.json()[\"teams\"]) == 8\n# test /v0/leagues/\ndef test_read_leagues():\n    response = client.get(\"/v0/leagues/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 5\n# test /v0/teams/",
        "detail": "chapter6.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_leagues",
        "kind": 2,
        "importPath": "chapter6.test_main",
        "description": "chapter6.test_main",
        "peekOfCode": "def test_read_leagues():\n    response = client.get(\"/v0/leagues/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 5\n# test /v0/teams/\ndef test_read_teams():\n    response = client.get(\"/v0/teams/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 20\n# test /v0/teams/",
        "detail": "chapter6.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_teams",
        "kind": 2,
        "importPath": "chapter6.test_main",
        "description": "chapter6.test_main",
        "peekOfCode": "def test_read_teams():\n    response = client.get(\"/v0/teams/?skip=0&limit=500\")\n    assert response.status_code == 200\n    assert len(response.json()) == 20\n# test /v0/teams/\ndef test_read_teams_for_one_league():\n    response = client.get(\"/v0/teams/?skip=0&limit=500&league_id=5001\")\n    assert response.status_code == 200\n    assert len(response.json()) == 12\n# test the count functions",
        "detail": "chapter6.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_teams_for_one_league",
        "kind": 2,
        "importPath": "chapter6.test_main",
        "description": "chapter6.test_main",
        "peekOfCode": "def test_read_teams_for_one_league():\n    response = client.get(\"/v0/teams/?skip=0&limit=500&league_id=5001\")\n    assert response.status_code == 200\n    assert len(response.json()) == 12\n# test the count functions\ndef test_counts():\n    response = client.get(\"/v0/counts/\")\n    response_data = response.json()\n    assert response.status_code == 200\n    assert response_data[\"league_count\"] == 5",
        "detail": "chapter6.test_main",
        "documentation": {}
    },
    {
        "label": "test_counts",
        "kind": 2,
        "importPath": "chapter6.test_main",
        "description": "chapter6.test_main",
        "peekOfCode": "def test_counts():\n    response = client.get(\"/v0/counts/\")\n    response_data = response.json()\n    assert response.status_code == 200\n    assert response_data[\"league_count\"] == 5\n    assert response_data[\"team_count\"] == 20\n    assert response_data[\"player_count\"] == 1018",
        "detail": "chapter6.test_main",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "chapter6.test_main",
        "description": "chapter6.test_main",
        "peekOfCode": "client = TestClient(app)\n# test the health check endpoint\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"API health check successful\"}\n# test /v0/players/\ndef test_read_players():\n    response = client.get(\"/v0/players/?skip=0&limit=10000\")\n    assert response.status_code == 200",
        "detail": "chapter6.test_main",
        "documentation": {}
    },
    {
        "label": "Performance",
        "kind": 6,
        "importPath": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "description": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "peekOfCode": "class Performance(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    performance_id : int\n    player_id : int\n    week_number : str\n    fantasy_points : float\n    last_changed_date : date\nclass PlayerBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)    \n    player_id : int",
        "detail": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "PlayerBase",
        "kind": 6,
        "importPath": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "description": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "peekOfCode": "class PlayerBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)    \n    player_id : int\n    gsis_id: str\n    first_name : str\n    last_name : str\n    position : str\n    last_changed_date : date\nclass Player(PlayerBase):\n    model_config = ConfigDict(from_attributes = True)",
        "detail": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "description": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "peekOfCode": "class Player(PlayerBase):\n    model_config = ConfigDict(from_attributes = True)\n    performances: List[Performance] = []\nclass TeamBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    team_id : int\n    team_name : str\n    last_changed_date : date\nclass Team(TeamBase):",
        "detail": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "TeamBase",
        "kind": 6,
        "importPath": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "description": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "peekOfCode": "class TeamBase(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    team_id : int\n    team_name : str\n    last_changed_date : date\nclass Team(TeamBase):\n    model_config = ConfigDict(from_attributes = True)\n    players: List[PlayerBase] = []\nclass League(BaseModel):",
        "detail": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "description": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "peekOfCode": "class Team(TeamBase):\n    model_config = ConfigDict(from_attributes = True)\n    players: List[PlayerBase] = []\nclass League(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    league_name : str\n    scoring_type : str\n    last_changed_date : date\n    teams: List[TeamBase] = []",
        "detail": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "League",
        "kind": 6,
        "importPath": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "description": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "peekOfCode": "class League(BaseModel):\n    model_config = ConfigDict(from_attributes = True)\n    league_id : int\n    league_name : str\n    scoring_type : str\n    last_changed_date : date\n    teams: List[TeamBase] = []\nclass Counts(BaseModel):\n    league_count : int\n    team_count : int",
        "detail": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "Counts",
        "kind": 6,
        "importPath": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "description": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "peekOfCode": "class Counts(BaseModel):\n    league_count : int\n    team_count : int\n    player_count : int",
        "detail": "chapter7.complete.sdk.src.swcpy.schemas.schemas",
        "documentation": {}
    },
    {
        "label": "SWCClient",
        "kind": 6,
        "importPath": "chapter7.complete.sdk.src.swcpy.swc_client",
        "description": "chapter7.complete.sdk.src.swcpy.swc_client",
        "peekOfCode": "class SWCClient:\n    \"\"\"Interacts with the Sports World Central API.\n        This SDK class simplifies the process of using the SWC fantasy\n        football API. It supports all the functions of SWC API and returns\n        validated datatypes.\n    Typical usage example:\n        client = SWCClient()\n        response = client.get_health_check()\n    \"\"\"\n    HEALTH_CHECK_ENDPOINT = \"/\"",
        "detail": "chapter7.complete.sdk.src.swcpy.swc_client",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "chapter7.complete.sdk.src.swcpy.swc_client",
        "description": "chapter7.complete.sdk.src.swcpy.swc_client",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SWCClient:\n    \"\"\"Interacts with the Sports World Central API.\n        This SDK class simplifies the process of using the SWC fantasy\n        football API. It supports all the functions of SWC API and returns\n        validated datatypes.\n    Typical usage example:\n        client = SWCClient()\n        response = client.get_health_check()\n    \"\"\"",
        "detail": "chapter7.complete.sdk.src.swcpy.swc_client",
        "documentation": {}
    },
    {
        "label": "SWCConfig",
        "kind": 6,
        "importPath": "chapter7.complete.sdk.src.swcpy.swc_config",
        "description": "chapter7.complete.sdk.src.swcpy.swc_config",
        "peekOfCode": "class SWCConfig:\n    \"\"\"Configuration class containing arguments for the SDK client.\n    Contains configuration for the base URL and progressive backoff.\n    \"\"\"\n    swc_base_url: str\n    swc_backoff: bool\n    swc_backoff_max_time: int\n    swc_bulk_file_format: str\n    def __init__(\n        self,",
        "detail": "chapter7.complete.sdk.src.swcpy.swc_config",
        "documentation": {}
    },
    {
        "label": "test_health_check",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy",
        "description": "chapter7.complete.sdk.tests.test_swcpy",
        "peekOfCode": "def test_health_check(): \n    \"\"\"Tests health check from SDK\"\"\"\n    config = SWCConfig(swc_base_url=\"http://0.0.0.0:8000\",backoff=False)\n    #config = SWCConfig(backoff=False)\n    client = SWCClient(config)    \n    response = client.get_health_check()\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"API health check successful\"}\ndef test_list_leagues(): \n    \"\"\"Tests get leagues from SDK\"\"\"",
        "detail": "chapter7.complete.sdk.tests.test_swcpy",
        "documentation": {}
    },
    {
        "label": "test_list_leagues",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy",
        "description": "chapter7.complete.sdk.tests.test_swcpy",
        "peekOfCode": "def test_list_leagues(): \n    \"\"\"Tests get leagues from SDK\"\"\"\n    config = SWCConfig(swc_base_url=\"http://0.0.0.0:8000\",backoff=False)\n    client = SWCClient(config)    \n    leagues_response = client.list_leagues()\n    # Assert the endpoint returned a list object\n    assert isinstance(leagues_response, list)\n    # Assert each item in the list is an instance of Pydantic League object\n    for league in leagues_response:\n        assert isinstance(league, League)",
        "detail": "chapter7.complete.sdk.tests.test_swcpy",
        "documentation": {}
    },
    {
        "label": "test_bulk_player_file_parquet",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy",
        "description": "chapter7.complete.sdk.tests.test_swcpy",
        "peekOfCode": "def test_bulk_player_file_parquet(): \n    \"\"\"Tests bulk player download through SDK - Parquet\"\"\"\n    config = SWCConfig(bulk_file_format = \"parquet\") \n    client = SWCClient(config)    \n    player_file_parquet = client.get_bulk_player_file()\n    # Assert the file has the correct number of records (including header)\n    player_table = pq.read_table(BytesIO(player_file_parquet)) \n    player_df = player_table.to_pandas()\n    assert len(player_df) == 1018",
        "detail": "chapter7.complete.sdk.tests.test_swcpy",
        "documentation": {}
    },
    {
        "label": "test_environment_variable",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_environment_variable():\n    import os\n    # Retrieve the environment variable\n    swc_base_url = os.getenv('SWC_API_BASE_URL')\n    # Print the value of the environment variable\n    print(f\"API_BASE_URL: {swc_base_url}\")\n    # Check if the environment variable is set correctly\n    assert(swc_base_url == 'http://0.0.0.0:8000')\ndef test_health_check():\n    \"\"\"Tests health check from SDK\"\"\"",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_health_check",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_health_check():\n    \"\"\"Tests health check from SDK\"\"\"\n    config = SWCConfig(backoff=False)\n    client = SWCClient(config)    \n    response = client.get_health_check()\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"API health check successful\"}\ndef test_list_leagues():\n    \"\"\"Tests get leagues from SDK\"\"\"\n    config = SWCConfig(backoff=False)",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_list_leagues",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_list_leagues():\n    \"\"\"Tests get leagues from SDK\"\"\"\n    config = SWCConfig(backoff=False)\n    client = SWCClient(config)    \n    leagues_response = client.list_leagues()\n    # Assert the endpoint returned a list object\n    assert isinstance(leagues_response, list)\n    # Assert each item in the list is an instance of Pydantic League object\n    for league in leagues_response:\n        assert isinstance(league, League)",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_list_leagues_no_backoff",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_list_leagues_no_backoff():\n    \"\"\"Tests get leagues from SDK without backoff\"\"\"\n    client = SWCClient(config)    \n    leagues_response = client.list_leagues()\n    # Assert the list is not empty\n    assert isinstance(leagues_response, list)\n    # Assert each item in the list is an instance of League\n    for league in leagues_response:\n        assert isinstance(league, League)\n    assert len(leagues_response) == 5    ",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_get_leagues_with_filter",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_get_leagues_with_filter():\n    \"\"\"Tests get leagues from SDK\"\"\"\n    leagues_response = client.list_leagues(league_name='Pigskin Prodigal Fantasy League')\n    # Assert the list is not empty\n    assert isinstance(leagues_response, list)\n    # Assert each item in the list is an instance of League\n    for league in leagues_response:\n        assert isinstance(league, League)\n    assert len(leagues_response) == 1\ndef test_get_league_by_id():",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_get_league_by_id",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_get_league_by_id():\n    \"\"\"Tests get leagues from SDK\"\"\"\n    league_response = client.get_league_by_id(5002)\n    assert isinstance(league_response, League)\n    assert len(league_response.teams) == 8        \ndef test_list_teams():\n    \"\"\"Tests list teams from SDK\"\"\"\n    teams_response = client.list_teams()\n    # Assert the list is not empty\n    assert isinstance(teams_response, list)",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_list_teams",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_list_teams():\n    \"\"\"Tests list teams from SDK\"\"\"\n    teams_response = client.list_teams()\n    # Assert the list is not empty\n    assert isinstance(teams_response, list)\n    # Assert each item in the list is an instance of League\n    for team in teams_response:\n        assert isinstance(team, Team)\n    assert len(teams_response) == 20\n#players",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_list_players",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_list_players():\n    \"\"\"Tests get players from SDK\"\"\"\n    players_response = client.list_players(skip=0,limit=1500)\n    # Assert the list is not empty\n    assert isinstance(players_response, list)\n    # Assert each item in the list is an instance of League\n    for player in players_response:\n        assert isinstance(player, Player)\n    assert len(players_response) == 1018\ndef test_list_players_by_name():",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_list_players_by_name",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_list_players_by_name():\n    \"\"\"Tests that the count of players in the database is what is expected\"\"\"\n    players_response = client.list_players(first_name=\"Bryce\", last_name=\"Young\")\n    # Assert the list is not empty\n    assert isinstance(players_response, list)\n    # Assert each item in the list is an instance of League\n    for player in players_response:\n        assert isinstance(player, Player)\n    assert len(players_response) == 1\n    assert players_response[0].player_id == 2009",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_get_player_by_id",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_get_player_by_id():\n    \"\"\"Tests get player by ID from SDK\"\"\"\n    player_response = client.get_player_by_id(2009)\n    assert isinstance(player_response, Player)\n    assert player_response.first_name == \"Bryce\"       \n#scoring endpoints\ndef test_list_performances():\n    \"\"\"Tests get peformances from SDK\"\"\"\n    performances_response = client.list_performances(skip=0,limit=20000)\n    # Assert the list is not empty",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_list_performances",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_list_performances():\n    \"\"\"Tests get peformances from SDK\"\"\"\n    performances_response = client.list_performances(skip=0,limit=20000)\n    # Assert the list is not empty\n    assert isinstance(performances_response, list)\n    # Assert each item in the list is an instance of League\n    for performance in performances_response:\n        assert isinstance(performance, Performance)\n    assert len(performances_response) == 17306\n#test /v0/performances/ with changed date",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_list_performances_by_date",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_list_performances_by_date():\n    \"\"\"Tests get peformances from SDK\"\"\"\n    performances_response = client.list_performances(skip=0,limit=3000,minimum_last_changed_date=\"2024-04-01\")\n    # Assert the list is not empty\n    assert isinstance(performances_response, list)\n    # Assert each item in the list is an instance of League\n    for performance in performances_response:\n        assert isinstance(performance, Performance)\n    assert len(performances_response) == 2711\n#bulk file tests",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_bulk_player_file_parquet",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_bulk_player_file_parquet():\n    \"\"\"Tests bulk player download through SDK - Parquet\"\"\"\n    config = SWCConfig(bulk_file_format = \"parquet\")\n    client = SWCClient(config)    \n    player_file_parquet = client.get_bulk_player_file()\n    # Assert the file has the correct number of records (including header)\n    player_table = pq.read_table(BytesIO(player_file_parquet))\n    player_df = player_table.to_pandas()\n    assert len(player_df) == 1018\ndef test_bulk_player_file():",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_bulk_player_file",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_bulk_player_file():\n    \"\"\"Tests bulk player download through SDK\"\"\"\n    config = SWCConfig()\n    client = SWCClient(config)    \n    player_file = client.get_bulk_player_file()\n    # Write the file to disk to verify file download\n    output_file_path = data_dir + 'players_file.csv'\n    with open(output_file_path, 'wb') as f:\n        f.write(player_file)\n    # Decode the byte content to a string to test contents",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_bulk_league_file",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_bulk_league_file():\n    \"\"\"Tests bulk league download through SDK\"\"\"\n    config = SWCConfig()\n    client = SWCClient(config)    \n    league_file = client.get_bulk_league_file()\n    # Write the file to disk to verify file download\n    output_file_path = data_dir + 'leagues_file.csv'\n    with open(output_file_path, 'wb') as f:\n        f.write(league_file)\n    # Decode the byte content to a string to test contents",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_bulk_performance_file",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_bulk_performance_file():\n    \"\"\"Tests bulk performance download through SDK\"\"\"\n    config = SWCConfig()\n    client = SWCClient(config)    \n    performance_file = client.get_bulk_performance_file()\n    # Write the file to disk to verify file download\n    output_file_path = data_dir + 'performances_file.csv'\n    with open(output_file_path, 'wb') as f:\n        f.write(performance_file)\n    # Decode the byte content to a string to test contents",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_bulk_team_file",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_bulk_team_file():\n    \"\"\"Tests bulk team download through SDK\"\"\"\n    config = SWCConfig()\n    client = SWCClient(config)    \n    team_file = client.get_bulk_team_file()\n    # Write the file to disk to verify file download\n    output_file_path = data_dir + 'teams_file.csv'\n    with open(output_file_path, 'wb') as f:\n        f.write(team_file)\n    # Decode the byte content to a string to test contents",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "test_bulk_team_player_file",
        "kind": 2,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "def test_bulk_team_player_file():\n    \"\"\"Tests bulk team_player download through SDK\"\"\"\n    config = SWCConfig()\n    client = SWCClient(config)    \n    team_player_file = client.get_bulk_team_player_file()\n    # Write the file to disk to verify file download\n    output_file_path = data_dir + 'team_player_file.csv'\n    with open(output_file_path, 'wb') as f:\n        f.write(team_player_file)\n    # Decode the byte content to a string to test contents",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "current_dir",
        "kind": 5,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "current_dir = os.path.dirname(__file__)\ndata_dir = current_dir + \"/test_data_output/\"\nif not os.path.exists(data_dir):\n    os.makedirs(data_dir)\n\"\"\"Unit tests for PYSWC SDK\n    Tests the functionality of the SDK to interact\n    with the SWC API.\nTypical usage example:\n    pytest test_pyswc.py\n\"\"\"",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "data_dir",
        "kind": 5,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "data_dir = current_dir + \"/test_data_output/\"\nif not os.path.exists(data_dir):\n    os.makedirs(data_dir)\n\"\"\"Unit tests for PYSWC SDK\n    Tests the functionality of the SDK to interact\n    with the SWC API.\nTypical usage example:\n    pytest test_pyswc.py\n\"\"\"\nconfig = SWCConfig(backoff=False)",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "config = SWCConfig(backoff=False)\nclient = SWCClient(config)    \ndef test_environment_variable():\n    import os\n    # Retrieve the environment variable\n    swc_base_url = os.getenv('SWC_API_BASE_URL')\n    # Print the value of the environment variable\n    print(f\"API_BASE_URL: {swc_base_url}\")\n    # Check if the environment variable is set correctly\n    assert(swc_base_url == 'http://0.0.0.0:8000')",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "description": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "peekOfCode": "client = SWCClient(config)    \ndef test_environment_variable():\n    import os\n    # Retrieve the environment variable\n    swc_base_url = os.getenv('SWC_API_BASE_URL')\n    # Print the value of the environment variable\n    print(f\"API_BASE_URL: {swc_base_url}\")\n    # Check if the environment variable is set correctly\n    assert(swc_base_url == 'http://0.0.0.0:8000')\ndef test_health_check():",
        "detail": "chapter7.complete.sdk.tests.test_swcpy_expanded",
        "documentation": {}
    }
]